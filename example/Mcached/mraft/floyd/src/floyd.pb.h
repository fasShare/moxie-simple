// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: floyd.proto

#ifndef PROTOBUF_INCLUDED_floyd_2eproto
#define PROTOBUF_INCLUDED_floyd_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto 

namespace protobuf_floyd_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_floyd_2eproto
namespace floyd {
class CmdRequest;
class CmdRequestDefaultTypeInternal;
extern CmdRequestDefaultTypeInternal _CmdRequest_default_instance_;
class CmdRequest_AddServerRequest;
class CmdRequest_AddServerRequestDefaultTypeInternal;
extern CmdRequest_AddServerRequestDefaultTypeInternal _CmdRequest_AddServerRequest_default_instance_;
class CmdRequest_AppendEntries;
class CmdRequest_AppendEntriesDefaultTypeInternal;
extern CmdRequest_AppendEntriesDefaultTypeInternal _CmdRequest_AppendEntries_default_instance_;
class CmdRequest_KvRequest;
class CmdRequest_KvRequestDefaultTypeInternal;
extern CmdRequest_KvRequestDefaultTypeInternal _CmdRequest_KvRequest_default_instance_;
class CmdRequest_LockRequest;
class CmdRequest_LockRequestDefaultTypeInternal;
extern CmdRequest_LockRequestDefaultTypeInternal _CmdRequest_LockRequest_default_instance_;
class CmdRequest_McachedRequest;
class CmdRequest_McachedRequestDefaultTypeInternal;
extern CmdRequest_McachedRequestDefaultTypeInternal _CmdRequest_McachedRequest_default_instance_;
class CmdRequest_RemoveServerRequest;
class CmdRequest_RemoveServerRequestDefaultTypeInternal;
extern CmdRequest_RemoveServerRequestDefaultTypeInternal _CmdRequest_RemoveServerRequest_default_instance_;
class CmdRequest_RequestVote;
class CmdRequest_RequestVoteDefaultTypeInternal;
extern CmdRequest_RequestVoteDefaultTypeInternal _CmdRequest_RequestVote_default_instance_;
class CmdRequest_ServerStatus;
class CmdRequest_ServerStatusDefaultTypeInternal;
extern CmdRequest_ServerStatusDefaultTypeInternal _CmdRequest_ServerStatus_default_instance_;
class CmdResponse;
class CmdResponseDefaultTypeInternal;
extern CmdResponseDefaultTypeInternal _CmdResponse_default_instance_;
class CmdResponse_AppendEntriesResponse;
class CmdResponse_AppendEntriesResponseDefaultTypeInternal;
extern CmdResponse_AppendEntriesResponseDefaultTypeInternal _CmdResponse_AppendEntriesResponse_default_instance_;
class CmdResponse_KvResponse;
class CmdResponse_KvResponseDefaultTypeInternal;
extern CmdResponse_KvResponseDefaultTypeInternal _CmdResponse_KvResponse_default_instance_;
class CmdResponse_McachedResponse;
class CmdResponse_McachedResponseDefaultTypeInternal;
extern CmdResponse_McachedResponseDefaultTypeInternal _CmdResponse_McachedResponse_default_instance_;
class CmdResponse_RequestVoteResponse;
class CmdResponse_RequestVoteResponseDefaultTypeInternal;
extern CmdResponse_RequestVoteResponseDefaultTypeInternal _CmdResponse_RequestVoteResponse_default_instance_;
class CmdResponse_ServerStatus;
class CmdResponse_ServerStatusDefaultTypeInternal;
extern CmdResponse_ServerStatusDefaultTypeInternal _CmdResponse_ServerStatus_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class Lock;
class LockDefaultTypeInternal;
extern LockDefaultTypeInternal _Lock_default_instance_;
class Membership;
class MembershipDefaultTypeInternal;
extern MembershipDefaultTypeInternal _Membership_default_instance_;
}  // namespace floyd
namespace google {
namespace protobuf {
template<> ::floyd::CmdRequest* Arena::CreateMaybeMessage<::floyd::CmdRequest>(Arena*);
template<> ::floyd::CmdRequest_AddServerRequest* Arena::CreateMaybeMessage<::floyd::CmdRequest_AddServerRequest>(Arena*);
template<> ::floyd::CmdRequest_AppendEntries* Arena::CreateMaybeMessage<::floyd::CmdRequest_AppendEntries>(Arena*);
template<> ::floyd::CmdRequest_KvRequest* Arena::CreateMaybeMessage<::floyd::CmdRequest_KvRequest>(Arena*);
template<> ::floyd::CmdRequest_LockRequest* Arena::CreateMaybeMessage<::floyd::CmdRequest_LockRequest>(Arena*);
template<> ::floyd::CmdRequest_McachedRequest* Arena::CreateMaybeMessage<::floyd::CmdRequest_McachedRequest>(Arena*);
template<> ::floyd::CmdRequest_RemoveServerRequest* Arena::CreateMaybeMessage<::floyd::CmdRequest_RemoveServerRequest>(Arena*);
template<> ::floyd::CmdRequest_RequestVote* Arena::CreateMaybeMessage<::floyd::CmdRequest_RequestVote>(Arena*);
template<> ::floyd::CmdRequest_ServerStatus* Arena::CreateMaybeMessage<::floyd::CmdRequest_ServerStatus>(Arena*);
template<> ::floyd::CmdResponse* Arena::CreateMaybeMessage<::floyd::CmdResponse>(Arena*);
template<> ::floyd::CmdResponse_AppendEntriesResponse* Arena::CreateMaybeMessage<::floyd::CmdResponse_AppendEntriesResponse>(Arena*);
template<> ::floyd::CmdResponse_KvResponse* Arena::CreateMaybeMessage<::floyd::CmdResponse_KvResponse>(Arena*);
template<> ::floyd::CmdResponse_McachedResponse* Arena::CreateMaybeMessage<::floyd::CmdResponse_McachedResponse>(Arena*);
template<> ::floyd::CmdResponse_RequestVoteResponse* Arena::CreateMaybeMessage<::floyd::CmdResponse_RequestVoteResponse>(Arena*);
template<> ::floyd::CmdResponse_ServerStatus* Arena::CreateMaybeMessage<::floyd::CmdResponse_ServerStatus>(Arena*);
template<> ::floyd::Entry* Arena::CreateMaybeMessage<::floyd::Entry>(Arena*);
template<> ::floyd::Lock* Arena::CreateMaybeMessage<::floyd::Lock>(Arena*);
template<> ::floyd::Membership* Arena::CreateMaybeMessage<::floyd::Membership>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace floyd {

enum Entry_OpType {
  Entry_OpType_kRead = 0,
  Entry_OpType_kWrite = 1,
  Entry_OpType_kDelete = 2,
  Entry_OpType_kTryLock = 4,
  Entry_OpType_kUnLock = 5,
  Entry_OpType_kAddServer = 6,
  Entry_OpType_kRemoveServer = 7,
  Entry_OpType_kGetAllServers = 8,
  Entry_OpType_kMcachedWrite = 9,
  Entry_OpType_kMcachedRead = 10
};
bool Entry_OpType_IsValid(int value);
const Entry_OpType Entry_OpType_OpType_MIN = Entry_OpType_kRead;
const Entry_OpType Entry_OpType_OpType_MAX = Entry_OpType_kMcachedRead;
const int Entry_OpType_OpType_ARRAYSIZE = Entry_OpType_OpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Entry_OpType_descriptor();
inline const ::std::string& Entry_OpType_Name(Entry_OpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Entry_OpType_descriptor(), value);
}
inline bool Entry_OpType_Parse(
    const ::std::string& name, Entry_OpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Entry_OpType>(
    Entry_OpType_descriptor(), name, value);
}
enum Type {
  kRead = 0,
  kWrite = 1,
  kDelete = 3,
  kTryLock = 5,
  kUnLock = 6,
  kAddServer = 11,
  kRemoveServer = 12,
  kGetAllServers = 13,
  kMcachedWrite = 14,
  kMcachedRead = 15,
  kRequestVote = 8,
  kAppendEntries = 9,
  kServerStatus = 10
};
bool Type_IsValid(int value);
const Type Type_MIN = kRead;
const Type Type_MAX = kMcachedRead;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum StatusCode {
  kOk = 0,
  kNotFound = 1,
  kError = 2,
  kLocked = 3
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = kOk;
const StatusCode StatusCode_MAX = kLocked;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(NULL);
  }

  Entry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Entry_OpType OpType;
  static const OpType kRead =
    Entry_OpType_kRead;
  static const OpType kWrite =
    Entry_OpType_kWrite;
  static const OpType kDelete =
    Entry_OpType_kDelete;
  static const OpType kTryLock =
    Entry_OpType_kTryLock;
  static const OpType kUnLock =
    Entry_OpType_kUnLock;
  static const OpType kAddServer =
    Entry_OpType_kAddServer;
  static const OpType kRemoveServer =
    Entry_OpType_kRemoveServer;
  static const OpType kGetAllServers =
    Entry_OpType_kGetAllServers;
  static const OpType kMcachedWrite =
    Entry_OpType_kMcachedWrite;
  static const OpType kMcachedRead =
    Entry_OpType_kMcachedRead;
  static inline bool OpType_IsValid(int value) {
    return Entry_OpType_IsValid(value);
  }
  static const OpType OpType_MIN =
    Entry_OpType_OpType_MIN;
  static const OpType OpType_MAX =
    Entry_OpType_OpType_MAX;
  static const int OpType_ARRAYSIZE =
    Entry_OpType_OpType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OpType_descriptor() {
    return Entry_OpType_descriptor();
  }
  static inline const ::std::string& OpType_Name(OpType value) {
    return Entry_OpType_Name(value);
  }
  static inline bool OpType_Parse(const ::std::string& name,
      OpType* value) {
    return Entry_OpType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated bytes args = 8;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 8;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_args(int index, ::std::string&& value);
  #endif
  void set_args(int index, const char* value);
  void set_args(int index, const void* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  #if LANG_CXX11
  void add_args(::std::string&& value);
  #endif
  void add_args(const char* value);
  void add_args(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // optional string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional bytes holder = 5;
  bool has_holder() const;
  void clear_holder();
  static const int kHolderFieldNumber = 5;
  const ::std::string& holder() const;
  void set_holder(const ::std::string& value);
  #if LANG_CXX11
  void set_holder(::std::string&& value);
  #endif
  void set_holder(const char* value);
  void set_holder(const void* value, size_t size);
  ::std::string* mutable_holder();
  ::std::string* release_holder();
  void set_allocated_holder(::std::string* holder);

  // optional bytes server = 7;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 7;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const void* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // optional uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // optional uint64 lease_end = 6;
  bool has_lease_end() const;
  void clear_lease_end();
  static const int kLeaseEndFieldNumber = 6;
  ::google::protobuf::uint64 lease_end() const;
  void set_lease_end(::google::protobuf::uint64 value);

  // required .floyd.Entry.OpType optype = 4;
  bool has_optype() const;
  void clear_optype();
  static const int kOptypeFieldNumber = 4;
  ::floyd::Entry_OpType optype() const;
  void set_optype(::floyd::Entry_OpType value);

  // @@protoc_insertion_point(class_scope:floyd.Entry)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();
  void set_has_optype();
  void clear_has_optype();
  void set_has_holder();
  void clear_has_holder();
  void set_has_lease_end();
  void clear_has_lease_end();
  void set_has_server();
  void clear_has_server();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr holder_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 lease_end_;
  int optype_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdRequest_RequestVote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdRequest.RequestVote) */ {
 public:
  CmdRequest_RequestVote();
  virtual ~CmdRequest_RequestVote();

  CmdRequest_RequestVote(const CmdRequest_RequestVote& from);

  inline CmdRequest_RequestVote& operator=(const CmdRequest_RequestVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdRequest_RequestVote(CmdRequest_RequestVote&& from) noexcept
    : CmdRequest_RequestVote() {
    *this = ::std::move(from);
  }

  inline CmdRequest_RequestVote& operator=(CmdRequest_RequestVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_RequestVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdRequest_RequestVote* internal_default_instance() {
    return reinterpret_cast<const CmdRequest_RequestVote*>(
               &_CmdRequest_RequestVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CmdRequest_RequestVote* other);
  friend void swap(CmdRequest_RequestVote& a, CmdRequest_RequestVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdRequest_RequestVote* New() const final {
    return CreateMaybeMessage<CmdRequest_RequestVote>(NULL);
  }

  CmdRequest_RequestVote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdRequest_RequestVote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdRequest_RequestVote& from);
  void MergeFrom(const CmdRequest_RequestVote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdRequest_RequestVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // required uint64 last_log_index = 4;
  bool has_last_log_index() const;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 4;
  ::google::protobuf::uint64 last_log_index() const;
  void set_last_log_index(::google::protobuf::uint64 value);

  // required uint64 last_log_term = 5;
  bool has_last_log_term() const;
  void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 5;
  ::google::protobuf::uint64 last_log_term() const;
  void set_last_log_term(::google::protobuf::uint64 value);

  // required int32 port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.RequestVote)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();
  void set_has_last_log_index();
  void clear_has_last_log_index();
  void set_has_last_log_term();
  void clear_has_last_log_term();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 last_log_index_;
  ::google::protobuf::uint64 last_log_term_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdRequest_AppendEntries : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdRequest.AppendEntries) */ {
 public:
  CmdRequest_AppendEntries();
  virtual ~CmdRequest_AppendEntries();

  CmdRequest_AppendEntries(const CmdRequest_AppendEntries& from);

  inline CmdRequest_AppendEntries& operator=(const CmdRequest_AppendEntries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdRequest_AppendEntries(CmdRequest_AppendEntries&& from) noexcept
    : CmdRequest_AppendEntries() {
    *this = ::std::move(from);
  }

  inline CmdRequest_AppendEntries& operator=(CmdRequest_AppendEntries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_AppendEntries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdRequest_AppendEntries* internal_default_instance() {
    return reinterpret_cast<const CmdRequest_AppendEntries*>(
               &_CmdRequest_AppendEntries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CmdRequest_AppendEntries* other);
  friend void swap(CmdRequest_AppendEntries& a, CmdRequest_AppendEntries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdRequest_AppendEntries* New() const final {
    return CreateMaybeMessage<CmdRequest_AppendEntries>(NULL);
  }

  CmdRequest_AppendEntries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdRequest_AppendEntries>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdRequest_AppendEntries& from);
  void MergeFrom(const CmdRequest_AppendEntries& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdRequest_AppendEntries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .floyd.Entry entries = 7;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 7;
  ::floyd::Entry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::floyd::Entry >*
      mutable_entries();
  const ::floyd::Entry& entries(int index) const;
  ::floyd::Entry* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::floyd::Entry >&
      entries() const;

  // required bytes ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // required uint64 prev_log_index = 4;
  bool has_prev_log_index() const;
  void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 4;
  ::google::protobuf::uint64 prev_log_index() const;
  void set_prev_log_index(::google::protobuf::uint64 value);

  // required uint64 prev_log_term = 5;
  bool has_prev_log_term() const;
  void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 5;
  ::google::protobuf::uint64 prev_log_term() const;
  void set_prev_log_term(::google::protobuf::uint64 value);

  // required uint64 leader_commit = 6;
  bool has_leader_commit() const;
  void clear_leader_commit();
  static const int kLeaderCommitFieldNumber = 6;
  ::google::protobuf::uint64 leader_commit() const;
  void set_leader_commit(::google::protobuf::uint64 value);

  // required int32 port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.AppendEntries)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();
  void set_has_prev_log_index();
  void clear_has_prev_log_index();
  void set_has_prev_log_term();
  void clear_has_prev_log_term();
  void set_has_leader_commit();
  void clear_has_leader_commit();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::floyd::Entry > entries_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 prev_log_index_;
  ::google::protobuf::uint64 prev_log_term_;
  ::google::protobuf::uint64 leader_commit_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdRequest_KvRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdRequest.KvRequest) */ {
 public:
  CmdRequest_KvRequest();
  virtual ~CmdRequest_KvRequest();

  CmdRequest_KvRequest(const CmdRequest_KvRequest& from);

  inline CmdRequest_KvRequest& operator=(const CmdRequest_KvRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdRequest_KvRequest(CmdRequest_KvRequest&& from) noexcept
    : CmdRequest_KvRequest() {
    *this = ::std::move(from);
  }

  inline CmdRequest_KvRequest& operator=(CmdRequest_KvRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_KvRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdRequest_KvRequest* internal_default_instance() {
    return reinterpret_cast<const CmdRequest_KvRequest*>(
               &_CmdRequest_KvRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CmdRequest_KvRequest* other);
  friend void swap(CmdRequest_KvRequest& a, CmdRequest_KvRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdRequest_KvRequest* New() const final {
    return CreateMaybeMessage<CmdRequest_KvRequest>(NULL);
  }

  CmdRequest_KvRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdRequest_KvRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdRequest_KvRequest& from);
  void MergeFrom(const CmdRequest_KvRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdRequest_KvRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.KvRequest)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdRequest_LockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdRequest.LockRequest) */ {
 public:
  CmdRequest_LockRequest();
  virtual ~CmdRequest_LockRequest();

  CmdRequest_LockRequest(const CmdRequest_LockRequest& from);

  inline CmdRequest_LockRequest& operator=(const CmdRequest_LockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdRequest_LockRequest(CmdRequest_LockRequest&& from) noexcept
    : CmdRequest_LockRequest() {
    *this = ::std::move(from);
  }

  inline CmdRequest_LockRequest& operator=(CmdRequest_LockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_LockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdRequest_LockRequest* internal_default_instance() {
    return reinterpret_cast<const CmdRequest_LockRequest*>(
               &_CmdRequest_LockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CmdRequest_LockRequest* other);
  friend void swap(CmdRequest_LockRequest& a, CmdRequest_LockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdRequest_LockRequest* New() const final {
    return CreateMaybeMessage<CmdRequest_LockRequest>(NULL);
  }

  CmdRequest_LockRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdRequest_LockRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdRequest_LockRequest& from);
  void MergeFrom(const CmdRequest_LockRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdRequest_LockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required bytes holder = 2;
  bool has_holder() const;
  void clear_holder();
  static const int kHolderFieldNumber = 2;
  const ::std::string& holder() const;
  void set_holder(const ::std::string& value);
  #if LANG_CXX11
  void set_holder(::std::string&& value);
  #endif
  void set_holder(const char* value);
  void set_holder(const void* value, size_t size);
  ::std::string* mutable_holder();
  ::std::string* release_holder();
  void set_allocated_holder(::std::string* holder);

  // optional uint64 lease_end = 3;
  bool has_lease_end() const;
  void clear_lease_end();
  static const int kLeaseEndFieldNumber = 3;
  ::google::protobuf::uint64 lease_end() const;
  void set_lease_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.LockRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_holder();
  void clear_has_holder();
  void set_has_lease_end();
  void clear_has_lease_end();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr holder_;
  ::google::protobuf::uint64 lease_end_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdRequest_AddServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdRequest.AddServerRequest) */ {
 public:
  CmdRequest_AddServerRequest();
  virtual ~CmdRequest_AddServerRequest();

  CmdRequest_AddServerRequest(const CmdRequest_AddServerRequest& from);

  inline CmdRequest_AddServerRequest& operator=(const CmdRequest_AddServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdRequest_AddServerRequest(CmdRequest_AddServerRequest&& from) noexcept
    : CmdRequest_AddServerRequest() {
    *this = ::std::move(from);
  }

  inline CmdRequest_AddServerRequest& operator=(CmdRequest_AddServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_AddServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdRequest_AddServerRequest* internal_default_instance() {
    return reinterpret_cast<const CmdRequest_AddServerRequest*>(
               &_CmdRequest_AddServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CmdRequest_AddServerRequest* other);
  friend void swap(CmdRequest_AddServerRequest& a, CmdRequest_AddServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdRequest_AddServerRequest* New() const final {
    return CreateMaybeMessage<CmdRequest_AddServerRequest>(NULL);
  }

  CmdRequest_AddServerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdRequest_AddServerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdRequest_AddServerRequest& from);
  void MergeFrom(const CmdRequest_AddServerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdRequest_AddServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes new_server = 1;
  bool has_new_server() const;
  void clear_new_server();
  static const int kNewServerFieldNumber = 1;
  const ::std::string& new_server() const;
  void set_new_server(const ::std::string& value);
  #if LANG_CXX11
  void set_new_server(::std::string&& value);
  #endif
  void set_new_server(const char* value);
  void set_new_server(const void* value, size_t size);
  ::std::string* mutable_new_server();
  ::std::string* release_new_server();
  void set_allocated_new_server(::std::string* new_server);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.AddServerRequest)
 private:
  void set_has_new_server();
  void clear_has_new_server();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr new_server_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdRequest_RemoveServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdRequest.RemoveServerRequest) */ {
 public:
  CmdRequest_RemoveServerRequest();
  virtual ~CmdRequest_RemoveServerRequest();

  CmdRequest_RemoveServerRequest(const CmdRequest_RemoveServerRequest& from);

  inline CmdRequest_RemoveServerRequest& operator=(const CmdRequest_RemoveServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdRequest_RemoveServerRequest(CmdRequest_RemoveServerRequest&& from) noexcept
    : CmdRequest_RemoveServerRequest() {
    *this = ::std::move(from);
  }

  inline CmdRequest_RemoveServerRequest& operator=(CmdRequest_RemoveServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_RemoveServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdRequest_RemoveServerRequest* internal_default_instance() {
    return reinterpret_cast<const CmdRequest_RemoveServerRequest*>(
               &_CmdRequest_RemoveServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CmdRequest_RemoveServerRequest* other);
  friend void swap(CmdRequest_RemoveServerRequest& a, CmdRequest_RemoveServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdRequest_RemoveServerRequest* New() const final {
    return CreateMaybeMessage<CmdRequest_RemoveServerRequest>(NULL);
  }

  CmdRequest_RemoveServerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdRequest_RemoveServerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdRequest_RemoveServerRequest& from);
  void MergeFrom(const CmdRequest_RemoveServerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdRequest_RemoveServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes old_server = 1;
  bool has_old_server() const;
  void clear_old_server();
  static const int kOldServerFieldNumber = 1;
  const ::std::string& old_server() const;
  void set_old_server(const ::std::string& value);
  #if LANG_CXX11
  void set_old_server(::std::string&& value);
  #endif
  void set_old_server(const char* value);
  void set_old_server(const void* value, size_t size);
  ::std::string* mutable_old_server();
  ::std::string* release_old_server();
  void set_allocated_old_server(::std::string* old_server);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.RemoveServerRequest)
 private:
  void set_has_old_server();
  void clear_has_old_server();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr old_server_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdRequest_ServerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdRequest.ServerStatus) */ {
 public:
  CmdRequest_ServerStatus();
  virtual ~CmdRequest_ServerStatus();

  CmdRequest_ServerStatus(const CmdRequest_ServerStatus& from);

  inline CmdRequest_ServerStatus& operator=(const CmdRequest_ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdRequest_ServerStatus(CmdRequest_ServerStatus&& from) noexcept
    : CmdRequest_ServerStatus() {
    *this = ::std::move(from);
  }

  inline CmdRequest_ServerStatus& operator=(CmdRequest_ServerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_ServerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdRequest_ServerStatus* internal_default_instance() {
    return reinterpret_cast<const CmdRequest_ServerStatus*>(
               &_CmdRequest_ServerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CmdRequest_ServerStatus* other);
  friend void swap(CmdRequest_ServerStatus& a, CmdRequest_ServerStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdRequest_ServerStatus* New() const final {
    return CreateMaybeMessage<CmdRequest_ServerStatus>(NULL);
  }

  CmdRequest_ServerStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdRequest_ServerStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdRequest_ServerStatus& from);
  void MergeFrom(const CmdRequest_ServerStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdRequest_ServerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ip = 3;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required int64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // required int64 commit_index = 2;
  bool has_commit_index() const;
  void clear_commit_index();
  static const int kCommitIndexFieldNumber = 2;
  ::google::protobuf::int64 commit_index() const;
  void set_commit_index(::google::protobuf::int64 value);

  // optional int32 port = 4;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.ServerStatus)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_commit_index();
  void clear_has_commit_index();
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 commit_index_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdRequest_McachedRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdRequest.McachedRequest) */ {
 public:
  CmdRequest_McachedRequest();
  virtual ~CmdRequest_McachedRequest();

  CmdRequest_McachedRequest(const CmdRequest_McachedRequest& from);

  inline CmdRequest_McachedRequest& operator=(const CmdRequest_McachedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdRequest_McachedRequest(CmdRequest_McachedRequest&& from) noexcept
    : CmdRequest_McachedRequest() {
    *this = ::std::move(from);
  }

  inline CmdRequest_McachedRequest& operator=(CmdRequest_McachedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_McachedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdRequest_McachedRequest* internal_default_instance() {
    return reinterpret_cast<const CmdRequest_McachedRequest*>(
               &_CmdRequest_McachedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CmdRequest_McachedRequest* other);
  friend void swap(CmdRequest_McachedRequest& a, CmdRequest_McachedRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdRequest_McachedRequest* New() const final {
    return CreateMaybeMessage<CmdRequest_McachedRequest>(NULL);
  }

  CmdRequest_McachedRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdRequest_McachedRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdRequest_McachedRequest& from);
  void MergeFrom(const CmdRequest_McachedRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdRequest_McachedRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes args = 1;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 1;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_args(int index, ::std::string&& value);
  #endif
  void set_args(int index, const char* value);
  void set_args(int index, const void* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  #if LANG_CXX11
  void add_args(::std::string&& value);
  #endif
  void add_args(const char* value);
  void add_args(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.McachedRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdRequest) */ {
 public:
  CmdRequest();
  virtual ~CmdRequest();

  CmdRequest(const CmdRequest& from);

  inline CmdRequest& operator=(const CmdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdRequest(CmdRequest&& from) noexcept
    : CmdRequest() {
    *this = ::std::move(from);
  }

  inline CmdRequest& operator=(CmdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdRequest* internal_default_instance() {
    return reinterpret_cast<const CmdRequest*>(
               &_CmdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CmdRequest* other);
  friend void swap(CmdRequest& a, CmdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdRequest* New() const final {
    return CreateMaybeMessage<CmdRequest>(NULL);
  }

  CmdRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdRequest& from);
  void MergeFrom(const CmdRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CmdRequest_RequestVote RequestVote;
  typedef CmdRequest_AppendEntries AppendEntries;
  typedef CmdRequest_KvRequest KvRequest;
  typedef CmdRequest_LockRequest LockRequest;
  typedef CmdRequest_AddServerRequest AddServerRequest;
  typedef CmdRequest_RemoveServerRequest RemoveServerRequest;
  typedef CmdRequest_ServerStatus ServerStatus;
  typedef CmdRequest_McachedRequest McachedRequest;

  // accessors -------------------------------------------------------

  // optional .floyd.CmdRequest.RequestVote request_vote = 2;
  bool has_request_vote() const;
  void clear_request_vote();
  static const int kRequestVoteFieldNumber = 2;
  private:
  const ::floyd::CmdRequest_RequestVote& _internal_request_vote() const;
  public:
  const ::floyd::CmdRequest_RequestVote& request_vote() const;
  ::floyd::CmdRequest_RequestVote* release_request_vote();
  ::floyd::CmdRequest_RequestVote* mutable_request_vote();
  void set_allocated_request_vote(::floyd::CmdRequest_RequestVote* request_vote);

  // optional .floyd.CmdRequest.AppendEntries append_entries = 3;
  bool has_append_entries() const;
  void clear_append_entries();
  static const int kAppendEntriesFieldNumber = 3;
  private:
  const ::floyd::CmdRequest_AppendEntries& _internal_append_entries() const;
  public:
  const ::floyd::CmdRequest_AppendEntries& append_entries() const;
  ::floyd::CmdRequest_AppendEntries* release_append_entries();
  ::floyd::CmdRequest_AppendEntries* mutable_append_entries();
  void set_allocated_append_entries(::floyd::CmdRequest_AppendEntries* append_entries);

  // optional .floyd.CmdRequest.KvRequest kv_request = 4;
  bool has_kv_request() const;
  void clear_kv_request();
  static const int kKvRequestFieldNumber = 4;
  private:
  const ::floyd::CmdRequest_KvRequest& _internal_kv_request() const;
  public:
  const ::floyd::CmdRequest_KvRequest& kv_request() const;
  ::floyd::CmdRequest_KvRequest* release_kv_request();
  ::floyd::CmdRequest_KvRequest* mutable_kv_request();
  void set_allocated_kv_request(::floyd::CmdRequest_KvRequest* kv_request);

  // optional .floyd.CmdRequest.LockRequest lock_request = 5;
  bool has_lock_request() const;
  void clear_lock_request();
  static const int kLockRequestFieldNumber = 5;
  private:
  const ::floyd::CmdRequest_LockRequest& _internal_lock_request() const;
  public:
  const ::floyd::CmdRequest_LockRequest& lock_request() const;
  ::floyd::CmdRequest_LockRequest* release_lock_request();
  ::floyd::CmdRequest_LockRequest* mutable_lock_request();
  void set_allocated_lock_request(::floyd::CmdRequest_LockRequest* lock_request);

  // optional .floyd.CmdRequest.ServerStatus server_status = 6;
  bool has_server_status() const;
  void clear_server_status();
  static const int kServerStatusFieldNumber = 6;
  private:
  const ::floyd::CmdRequest_ServerStatus& _internal_server_status() const;
  public:
  const ::floyd::CmdRequest_ServerStatus& server_status() const;
  ::floyd::CmdRequest_ServerStatus* release_server_status();
  ::floyd::CmdRequest_ServerStatus* mutable_server_status();
  void set_allocated_server_status(::floyd::CmdRequest_ServerStatus* server_status);

  // optional .floyd.CmdRequest.AddServerRequest add_server_request = 7;
  bool has_add_server_request() const;
  void clear_add_server_request();
  static const int kAddServerRequestFieldNumber = 7;
  private:
  const ::floyd::CmdRequest_AddServerRequest& _internal_add_server_request() const;
  public:
  const ::floyd::CmdRequest_AddServerRequest& add_server_request() const;
  ::floyd::CmdRequest_AddServerRequest* release_add_server_request();
  ::floyd::CmdRequest_AddServerRequest* mutable_add_server_request();
  void set_allocated_add_server_request(::floyd::CmdRequest_AddServerRequest* add_server_request);

  // optional .floyd.CmdRequest.RemoveServerRequest remove_server_request = 8;
  bool has_remove_server_request() const;
  void clear_remove_server_request();
  static const int kRemoveServerRequestFieldNumber = 8;
  private:
  const ::floyd::CmdRequest_RemoveServerRequest& _internal_remove_server_request() const;
  public:
  const ::floyd::CmdRequest_RemoveServerRequest& remove_server_request() const;
  ::floyd::CmdRequest_RemoveServerRequest* release_remove_server_request();
  ::floyd::CmdRequest_RemoveServerRequest* mutable_remove_server_request();
  void set_allocated_remove_server_request(::floyd::CmdRequest_RemoveServerRequest* remove_server_request);

  // optional .floyd.CmdRequest.McachedRequest mcached_request = 9;
  bool has_mcached_request() const;
  void clear_mcached_request();
  static const int kMcachedRequestFieldNumber = 9;
  private:
  const ::floyd::CmdRequest_McachedRequest& _internal_mcached_request() const;
  public:
  const ::floyd::CmdRequest_McachedRequest& mcached_request() const;
  ::floyd::CmdRequest_McachedRequest* release_mcached_request();
  ::floyd::CmdRequest_McachedRequest* mutable_mcached_request();
  void set_allocated_mcached_request(::floyd::CmdRequest_McachedRequest* mcached_request);

  // required .floyd.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::floyd::Type type() const;
  void set_type(::floyd::Type value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_request_vote();
  void clear_has_request_vote();
  void set_has_append_entries();
  void clear_has_append_entries();
  void set_has_kv_request();
  void clear_has_kv_request();
  void set_has_lock_request();
  void clear_has_lock_request();
  void set_has_server_status();
  void clear_has_server_status();
  void set_has_add_server_request();
  void clear_has_add_server_request();
  void set_has_remove_server_request();
  void clear_has_remove_server_request();
  void set_has_mcached_request();
  void clear_has_mcached_request();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::floyd::CmdRequest_RequestVote* request_vote_;
  ::floyd::CmdRequest_AppendEntries* append_entries_;
  ::floyd::CmdRequest_KvRequest* kv_request_;
  ::floyd::CmdRequest_LockRequest* lock_request_;
  ::floyd::CmdRequest_ServerStatus* server_status_;
  ::floyd::CmdRequest_AddServerRequest* add_server_request_;
  ::floyd::CmdRequest_RemoveServerRequest* remove_server_request_;
  ::floyd::CmdRequest_McachedRequest* mcached_request_;
  int type_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdResponse_RequestVoteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdResponse.RequestVoteResponse) */ {
 public:
  CmdResponse_RequestVoteResponse();
  virtual ~CmdResponse_RequestVoteResponse();

  CmdResponse_RequestVoteResponse(const CmdResponse_RequestVoteResponse& from);

  inline CmdResponse_RequestVoteResponse& operator=(const CmdResponse_RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdResponse_RequestVoteResponse(CmdResponse_RequestVoteResponse&& from) noexcept
    : CmdResponse_RequestVoteResponse() {
    *this = ::std::move(from);
  }

  inline CmdResponse_RequestVoteResponse& operator=(CmdResponse_RequestVoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_RequestVoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdResponse_RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const CmdResponse_RequestVoteResponse*>(
               &_CmdResponse_RequestVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CmdResponse_RequestVoteResponse* other);
  friend void swap(CmdResponse_RequestVoteResponse& a, CmdResponse_RequestVoteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdResponse_RequestVoteResponse* New() const final {
    return CreateMaybeMessage<CmdResponse_RequestVoteResponse>(NULL);
  }

  CmdResponse_RequestVoteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdResponse_RequestVoteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdResponse_RequestVoteResponse& from);
  void MergeFrom(const CmdResponse_RequestVoteResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdResponse_RequestVoteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // required bool vote_granted = 2;
  bool has_vote_granted() const;
  void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 2;
  bool vote_granted() const;
  void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.RequestVoteResponse)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_vote_granted();
  void clear_has_vote_granted();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 term_;
  bool vote_granted_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdResponse_AppendEntriesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdResponse.AppendEntriesResponse) */ {
 public:
  CmdResponse_AppendEntriesResponse();
  virtual ~CmdResponse_AppendEntriesResponse();

  CmdResponse_AppendEntriesResponse(const CmdResponse_AppendEntriesResponse& from);

  inline CmdResponse_AppendEntriesResponse& operator=(const CmdResponse_AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdResponse_AppendEntriesResponse(CmdResponse_AppendEntriesResponse&& from) noexcept
    : CmdResponse_AppendEntriesResponse() {
    *this = ::std::move(from);
  }

  inline CmdResponse_AppendEntriesResponse& operator=(CmdResponse_AppendEntriesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_AppendEntriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdResponse_AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const CmdResponse_AppendEntriesResponse*>(
               &_CmdResponse_AppendEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CmdResponse_AppendEntriesResponse* other);
  friend void swap(CmdResponse_AppendEntriesResponse& a, CmdResponse_AppendEntriesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdResponse_AppendEntriesResponse* New() const final {
    return CreateMaybeMessage<CmdResponse_AppendEntriesResponse>(NULL);
  }

  CmdResponse_AppendEntriesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdResponse_AppendEntriesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdResponse_AppendEntriesResponse& from);
  void MergeFrom(const CmdResponse_AppendEntriesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdResponse_AppendEntriesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // optional uint64 last_log_index = 3;
  bool has_last_log_index() const;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  ::google::protobuf::uint64 last_log_index() const;
  void set_last_log_index(::google::protobuf::uint64 value);

  // required bool success = 2;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.AppendEntriesResponse)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_success();
  void clear_has_success();
  void set_has_last_log_index();
  void clear_has_last_log_index();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 last_log_index_;
  bool success_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdResponse_KvResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdResponse.KvResponse) */ {
 public:
  CmdResponse_KvResponse();
  virtual ~CmdResponse_KvResponse();

  CmdResponse_KvResponse(const CmdResponse_KvResponse& from);

  inline CmdResponse_KvResponse& operator=(const CmdResponse_KvResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdResponse_KvResponse(CmdResponse_KvResponse&& from) noexcept
    : CmdResponse_KvResponse() {
    *this = ::std::move(from);
  }

  inline CmdResponse_KvResponse& operator=(CmdResponse_KvResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_KvResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdResponse_KvResponse* internal_default_instance() {
    return reinterpret_cast<const CmdResponse_KvResponse*>(
               &_CmdResponse_KvResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CmdResponse_KvResponse* other);
  friend void swap(CmdResponse_KvResponse& a, CmdResponse_KvResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdResponse_KvResponse* New() const final {
    return CreateMaybeMessage<CmdResponse_KvResponse>(NULL);
  }

  CmdResponse_KvResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdResponse_KvResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdResponse_KvResponse& from);
  void MergeFrom(const CmdResponse_KvResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdResponse_KvResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.KvResponse)
 private:
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdResponse_McachedResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdResponse.McachedResponse) */ {
 public:
  CmdResponse_McachedResponse();
  virtual ~CmdResponse_McachedResponse();

  CmdResponse_McachedResponse(const CmdResponse_McachedResponse& from);

  inline CmdResponse_McachedResponse& operator=(const CmdResponse_McachedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdResponse_McachedResponse(CmdResponse_McachedResponse&& from) noexcept
    : CmdResponse_McachedResponse() {
    *this = ::std::move(from);
  }

  inline CmdResponse_McachedResponse& operator=(CmdResponse_McachedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_McachedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdResponse_McachedResponse* internal_default_instance() {
    return reinterpret_cast<const CmdResponse_McachedResponse*>(
               &_CmdResponse_McachedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CmdResponse_McachedResponse* other);
  friend void swap(CmdResponse_McachedResponse& a, CmdResponse_McachedResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdResponse_McachedResponse* New() const final {
    return CreateMaybeMessage<CmdResponse_McachedResponse>(NULL);
  }

  CmdResponse_McachedResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdResponse_McachedResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdResponse_McachedResponse& from);
  void MergeFrom(const CmdResponse_McachedResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdResponse_McachedResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.McachedResponse)
 private:
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdResponse_ServerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdResponse.ServerStatus) */ {
 public:
  CmdResponse_ServerStatus();
  virtual ~CmdResponse_ServerStatus();

  CmdResponse_ServerStatus(const CmdResponse_ServerStatus& from);

  inline CmdResponse_ServerStatus& operator=(const CmdResponse_ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdResponse_ServerStatus(CmdResponse_ServerStatus&& from) noexcept
    : CmdResponse_ServerStatus() {
    *this = ::std::move(from);
  }

  inline CmdResponse_ServerStatus& operator=(CmdResponse_ServerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_ServerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdResponse_ServerStatus* internal_default_instance() {
    return reinterpret_cast<const CmdResponse_ServerStatus*>(
               &_CmdResponse_ServerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CmdResponse_ServerStatus* other);
  friend void swap(CmdResponse_ServerStatus& a, CmdResponse_ServerStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdResponse_ServerStatus* New() const final {
    return CreateMaybeMessage<CmdResponse_ServerStatus>(NULL);
  }

  CmdResponse_ServerStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdResponse_ServerStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdResponse_ServerStatus& from);
  void MergeFrom(const CmdResponse_ServerStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdResponse_ServerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes role = 3;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 3;
  const ::std::string& role() const;
  void set_role(const ::std::string& value);
  #if LANG_CXX11
  void set_role(::std::string&& value);
  #endif
  void set_role(const char* value);
  void set_role(const void* value, size_t size);
  ::std::string* mutable_role();
  ::std::string* release_role();
  void set_allocated_role(::std::string* role);

  // optional bytes leader_ip = 4;
  bool has_leader_ip() const;
  void clear_leader_ip();
  static const int kLeaderIpFieldNumber = 4;
  const ::std::string& leader_ip() const;
  void set_leader_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_ip(::std::string&& value);
  #endif
  void set_leader_ip(const char* value);
  void set_leader_ip(const void* value, size_t size);
  ::std::string* mutable_leader_ip();
  ::std::string* release_leader_ip();
  void set_allocated_leader_ip(::std::string* leader_ip);

  // optional bytes voted_for_ip = 6;
  bool has_voted_for_ip() const;
  void clear_voted_for_ip();
  static const int kVotedForIpFieldNumber = 6;
  const ::std::string& voted_for_ip() const;
  void set_voted_for_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_voted_for_ip(::std::string&& value);
  #endif
  void set_voted_for_ip(const char* value);
  void set_voted_for_ip(const void* value, size_t size);
  ::std::string* mutable_voted_for_ip();
  ::std::string* release_voted_for_ip();
  void set_allocated_voted_for_ip(::std::string* voted_for_ip);

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // required uint64 commit_index = 2;
  bool has_commit_index() const;
  void clear_commit_index();
  static const int kCommitIndexFieldNumber = 2;
  ::google::protobuf::uint64 commit_index() const;
  void set_commit_index(::google::protobuf::uint64 value);

  // optional int32 leader_port = 5;
  bool has_leader_port() const;
  void clear_leader_port();
  static const int kLeaderPortFieldNumber = 5;
  ::google::protobuf::int32 leader_port() const;
  void set_leader_port(::google::protobuf::int32 value);

  // optional int32 voted_for_port = 7;
  bool has_voted_for_port() const;
  void clear_voted_for_port();
  static const int kVotedForPortFieldNumber = 7;
  ::google::protobuf::int32 voted_for_port() const;
  void set_voted_for_port(::google::protobuf::int32 value);

  // optional uint64 last_log_term = 8;
  bool has_last_log_term() const;
  void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 8;
  ::google::protobuf::uint64 last_log_term() const;
  void set_last_log_term(::google::protobuf::uint64 value);

  // optional uint64 last_log_index = 9;
  bool has_last_log_index() const;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 9;
  ::google::protobuf::uint64 last_log_index() const;
  void set_last_log_index(::google::protobuf::uint64 value);

  // optional uint64 last_applied = 10;
  bool has_last_applied() const;
  void clear_last_applied();
  static const int kLastAppliedFieldNumber = 10;
  ::google::protobuf::uint64 last_applied() const;
  void set_last_applied(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.ServerStatus)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_commit_index();
  void clear_has_commit_index();
  void set_has_role();
  void clear_has_role();
  void set_has_leader_ip();
  void clear_has_leader_ip();
  void set_has_leader_port();
  void clear_has_leader_port();
  void set_has_voted_for_ip();
  void clear_has_voted_for_ip();
  void set_has_voted_for_port();
  void clear_has_voted_for_port();
  void set_has_last_log_term();
  void clear_has_last_log_term();
  void set_has_last_log_index();
  void clear_has_last_log_index();
  void set_has_last_applied();
  void clear_has_last_applied();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr role_;
  ::google::protobuf::internal::ArenaStringPtr leader_ip_;
  ::google::protobuf::internal::ArenaStringPtr voted_for_ip_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 commit_index_;
  ::google::protobuf::int32 leader_port_;
  ::google::protobuf::int32 voted_for_port_;
  ::google::protobuf::uint64 last_log_term_;
  ::google::protobuf::uint64 last_log_index_;
  ::google::protobuf::uint64 last_applied_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdResponse) */ {
 public:
  CmdResponse();
  virtual ~CmdResponse();

  CmdResponse(const CmdResponse& from);

  inline CmdResponse& operator=(const CmdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdResponse(CmdResponse&& from) noexcept
    : CmdResponse() {
    *this = ::std::move(from);
  }

  inline CmdResponse& operator=(CmdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdResponse* internal_default_instance() {
    return reinterpret_cast<const CmdResponse*>(
               &_CmdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CmdResponse* other);
  friend void swap(CmdResponse& a, CmdResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdResponse* New() const final {
    return CreateMaybeMessage<CmdResponse>(NULL);
  }

  CmdResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdResponse& from);
  void MergeFrom(const CmdResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CmdResponse_RequestVoteResponse RequestVoteResponse;
  typedef CmdResponse_AppendEntriesResponse AppendEntriesResponse;
  typedef CmdResponse_KvResponse KvResponse;
  typedef CmdResponse_McachedResponse McachedResponse;
  typedef CmdResponse_ServerStatus ServerStatus;

  // accessors -------------------------------------------------------

  // optional bytes msg = 5;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 5;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
  bool has_request_vote_res() const;
  void clear_request_vote_res();
  static const int kRequestVoteResFieldNumber = 3;
  private:
  const ::floyd::CmdResponse_RequestVoteResponse& _internal_request_vote_res() const;
  public:
  const ::floyd::CmdResponse_RequestVoteResponse& request_vote_res() const;
  ::floyd::CmdResponse_RequestVoteResponse* release_request_vote_res();
  ::floyd::CmdResponse_RequestVoteResponse* mutable_request_vote_res();
  void set_allocated_request_vote_res(::floyd::CmdResponse_RequestVoteResponse* request_vote_res);

  // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
  bool has_append_entries_res() const;
  void clear_append_entries_res();
  static const int kAppendEntriesResFieldNumber = 4;
  private:
  const ::floyd::CmdResponse_AppendEntriesResponse& _internal_append_entries_res() const;
  public:
  const ::floyd::CmdResponse_AppendEntriesResponse& append_entries_res() const;
  ::floyd::CmdResponse_AppendEntriesResponse* release_append_entries_res();
  ::floyd::CmdResponse_AppendEntriesResponse* mutable_append_entries_res();
  void set_allocated_append_entries_res(::floyd::CmdResponse_AppendEntriesResponse* append_entries_res);

  // optional .floyd.CmdResponse.KvResponse kv_response = 6;
  bool has_kv_response() const;
  void clear_kv_response();
  static const int kKvResponseFieldNumber = 6;
  private:
  const ::floyd::CmdResponse_KvResponse& _internal_kv_response() const;
  public:
  const ::floyd::CmdResponse_KvResponse& kv_response() const;
  ::floyd::CmdResponse_KvResponse* release_kv_response();
  ::floyd::CmdResponse_KvResponse* mutable_kv_response();
  void set_allocated_kv_response(::floyd::CmdResponse_KvResponse* kv_response);

  // optional .floyd.CmdResponse.ServerStatus server_status = 7;
  bool has_server_status() const;
  void clear_server_status();
  static const int kServerStatusFieldNumber = 7;
  private:
  const ::floyd::CmdResponse_ServerStatus& _internal_server_status() const;
  public:
  const ::floyd::CmdResponse_ServerStatus& server_status() const;
  ::floyd::CmdResponse_ServerStatus* release_server_status();
  ::floyd::CmdResponse_ServerStatus* mutable_server_status();
  void set_allocated_server_status(::floyd::CmdResponse_ServerStatus* server_status);

  // optional .floyd.Membership all_servers = 8;
  bool has_all_servers() const;
  void clear_all_servers();
  static const int kAllServersFieldNumber = 8;
  private:
  const ::floyd::Membership& _internal_all_servers() const;
  public:
  const ::floyd::Membership& all_servers() const;
  ::floyd::Membership* release_all_servers();
  ::floyd::Membership* mutable_all_servers();
  void set_allocated_all_servers(::floyd::Membership* all_servers);

  // optional .floyd.CmdResponse.McachedResponse mcached_response = 9;
  bool has_mcached_response() const;
  void clear_mcached_response();
  static const int kMcachedResponseFieldNumber = 9;
  private:
  const ::floyd::CmdResponse_McachedResponse& _internal_mcached_response() const;
  public:
  const ::floyd::CmdResponse_McachedResponse& mcached_response() const;
  ::floyd::CmdResponse_McachedResponse* release_mcached_response();
  ::floyd::CmdResponse_McachedResponse* mutable_mcached_response();
  void set_allocated_mcached_response(::floyd::CmdResponse_McachedResponse* mcached_response);

  // required .floyd.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::floyd::Type type() const;
  void set_type(::floyd::Type value);

  // optional .floyd.StatusCode code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::floyd::StatusCode code() const;
  void set_code(::floyd::StatusCode value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_code();
  void clear_has_code();
  void set_has_request_vote_res();
  void clear_has_request_vote_res();
  void set_has_append_entries_res();
  void clear_has_append_entries_res();
  void set_has_msg();
  void clear_has_msg();
  void set_has_kv_response();
  void clear_has_kv_response();
  void set_has_server_status();
  void clear_has_server_status();
  void set_has_all_servers();
  void clear_has_all_servers();
  void set_has_mcached_response();
  void clear_has_mcached_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::floyd::CmdResponse_RequestVoteResponse* request_vote_res_;
  ::floyd::CmdResponse_AppendEntriesResponse* append_entries_res_;
  ::floyd::CmdResponse_KvResponse* kv_response_;
  ::floyd::CmdResponse_ServerStatus* server_status_;
  ::floyd::Membership* all_servers_;
  ::floyd::CmdResponse_McachedResponse* mcached_response_;
  int type_;
  int code_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.Lock) */ {
 public:
  Lock();
  virtual ~Lock();

  Lock(const Lock& from);

  inline Lock& operator=(const Lock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lock(Lock&& from) noexcept
    : Lock() {
    *this = ::std::move(from);
  }

  inline Lock& operator=(Lock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lock* internal_default_instance() {
    return reinterpret_cast<const Lock*>(
               &_Lock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Lock* other);
  friend void swap(Lock& a, Lock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lock* New() const final {
    return CreateMaybeMessage<Lock>(NULL);
  }

  Lock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Lock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Lock& from);
  void MergeFrom(const Lock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes holder = 1;
  bool has_holder() const;
  void clear_holder();
  static const int kHolderFieldNumber = 1;
  const ::std::string& holder() const;
  void set_holder(const ::std::string& value);
  #if LANG_CXX11
  void set_holder(::std::string&& value);
  #endif
  void set_holder(const char* value);
  void set_holder(const void* value, size_t size);
  ::std::string* mutable_holder();
  ::std::string* release_holder();
  void set_allocated_holder(::std::string* holder);

  // required uint64 lease_end = 2;
  bool has_lease_end() const;
  void clear_lease_end();
  static const int kLeaseEndFieldNumber = 2;
  ::google::protobuf::uint64 lease_end() const;
  void set_lease_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.Lock)
 private:
  void set_has_holder();
  void clear_has_holder();
  void set_has_lease_end();
  void clear_has_lease_end();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr holder_;
  ::google::protobuf::uint64 lease_end_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Membership : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.Membership) */ {
 public:
  Membership();
  virtual ~Membership();

  Membership(const Membership& from);

  inline Membership& operator=(const Membership& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Membership(Membership&& from) noexcept
    : Membership() {
    *this = ::std::move(from);
  }

  inline Membership& operator=(Membership&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Membership& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Membership* internal_default_instance() {
    return reinterpret_cast<const Membership*>(
               &_Membership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Membership* other);
  friend void swap(Membership& a, Membership& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Membership* New() const final {
    return CreateMaybeMessage<Membership>(NULL);
  }

  Membership* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Membership>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Membership& from);
  void MergeFrom(const Membership& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Membership* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  const ::std::string& nodes(int index) const;
  ::std::string* mutable_nodes(int index);
  void set_nodes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_nodes(int index, ::std::string&& value);
  #endif
  void set_nodes(int index, const char* value);
  void set_nodes(int index, const void* value, size_t size);
  ::std::string* add_nodes();
  void add_nodes(const ::std::string& value);
  #if LANG_CXX11
  void add_nodes(::std::string&& value);
  #endif
  void add_nodes(const char* value);
  void add_nodes(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& nodes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nodes();

  // @@protoc_insertion_point(class_scope:floyd.Membership)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nodes_;
  friend struct ::protobuf_floyd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// optional uint64 term = 1;
inline bool Entry::has_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Entry::set_has_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Entry::clear_has_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Entry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:floyd.Entry.term)
  return term_;
}
inline void Entry::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.Entry.term)
}

// optional string key = 2;
inline bool Entry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Entry::key() const {
  // @@protoc_insertion_point(field_get:floyd.Entry.key)
  return key_.GetNoArena();
}
inline void Entry::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.Entry.key)
}
#if LANG_CXX11
inline void Entry::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.Entry.key)
}
#endif
inline void Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.Entry.key)
}
inline void Entry::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.Entry.key)
}
inline ::std::string* Entry::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:floyd.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_key() {
  // @@protoc_insertion_point(field_release:floyd.Entry.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:floyd.Entry.key)
}

// optional bytes value = 3;
inline bool Entry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Entry::value() const {
  // @@protoc_insertion_point(field_get:floyd.Entry.value)
  return value_.GetNoArena();
}
inline void Entry::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.Entry.value)
}
#if LANG_CXX11
inline void Entry::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.Entry.value)
}
#endif
inline void Entry::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.Entry.value)
}
inline void Entry::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.Entry.value)
}
inline ::std::string* Entry::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:floyd.Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_value() {
  // @@protoc_insertion_point(field_release:floyd.Entry.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:floyd.Entry.value)
}

// required .floyd.Entry.OpType optype = 4;
inline bool Entry::has_optype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Entry::set_has_optype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Entry::clear_has_optype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Entry::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::floyd::Entry_OpType Entry::optype() const {
  // @@protoc_insertion_point(field_get:floyd.Entry.optype)
  return static_cast< ::floyd::Entry_OpType >(optype_);
}
inline void Entry::set_optype(::floyd::Entry_OpType value) {
  assert(::floyd::Entry_OpType_IsValid(value));
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:floyd.Entry.optype)
}

// optional bytes holder = 5;
inline bool Entry::has_holder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entry::set_has_holder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Entry::clear_has_holder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Entry::clear_holder() {
  holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holder();
}
inline const ::std::string& Entry::holder() const {
  // @@protoc_insertion_point(field_get:floyd.Entry.holder)
  return holder_.GetNoArena();
}
inline void Entry::set_holder(const ::std::string& value) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.Entry.holder)
}
#if LANG_CXX11
inline void Entry::set_holder(::std::string&& value) {
  set_has_holder();
  holder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.Entry.holder)
}
#endif
inline void Entry::set_holder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.Entry.holder)
}
inline void Entry::set_holder(const void* value, size_t size) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.Entry.holder)
}
inline ::std::string* Entry::mutable_holder() {
  set_has_holder();
  // @@protoc_insertion_point(field_mutable:floyd.Entry.holder)
  return holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_holder() {
  // @@protoc_insertion_point(field_release:floyd.Entry.holder)
  if (!has_holder()) {
    return NULL;
  }
  clear_has_holder();
  return holder_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_holder(::std::string* holder) {
  if (holder != NULL) {
    set_has_holder();
  } else {
    clear_has_holder();
  }
  holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holder);
  // @@protoc_insertion_point(field_set_allocated:floyd.Entry.holder)
}

// optional uint64 lease_end = 6;
inline bool Entry::has_lease_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Entry::set_has_lease_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Entry::clear_has_lease_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Entry::clear_lease_end() {
  lease_end_ = GOOGLE_ULONGLONG(0);
  clear_has_lease_end();
}
inline ::google::protobuf::uint64 Entry::lease_end() const {
  // @@protoc_insertion_point(field_get:floyd.Entry.lease_end)
  return lease_end_;
}
inline void Entry::set_lease_end(::google::protobuf::uint64 value) {
  set_has_lease_end();
  lease_end_ = value;
  // @@protoc_insertion_point(field_set:floyd.Entry.lease_end)
}

// optional bytes server = 7;
inline bool Entry::has_server() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Entry::set_has_server() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Entry::clear_has_server() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Entry::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server();
}
inline const ::std::string& Entry::server() const {
  // @@protoc_insertion_point(field_get:floyd.Entry.server)
  return server_.GetNoArena();
}
inline void Entry::set_server(const ::std::string& value) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.Entry.server)
}
#if LANG_CXX11
inline void Entry::set_server(::std::string&& value) {
  set_has_server();
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.Entry.server)
}
#endif
inline void Entry::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.Entry.server)
}
inline void Entry::set_server(const void* value, size_t size) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.Entry.server)
}
inline ::std::string* Entry::mutable_server() {
  set_has_server();
  // @@protoc_insertion_point(field_mutable:floyd.Entry.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_server() {
  // @@protoc_insertion_point(field_release:floyd.Entry.server)
  if (!has_server()) {
    return NULL;
  }
  clear_has_server();
  return server_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    set_has_server();
  } else {
    clear_has_server();
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:floyd.Entry.server)
}

// repeated bytes args = 8;
inline int Entry::args_size() const {
  return args_.size();
}
inline void Entry::clear_args() {
  args_.Clear();
}
inline const ::std::string& Entry::args(int index) const {
  // @@protoc_insertion_point(field_get:floyd.Entry.args)
  return args_.Get(index);
}
inline ::std::string* Entry::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:floyd.Entry.args)
  return args_.Mutable(index);
}
inline void Entry::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:floyd.Entry.args)
  args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Entry::set_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:floyd.Entry.args)
  args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Entry::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:floyd.Entry.args)
}
inline void Entry::set_args(int index, const void* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:floyd.Entry.args)
}
inline ::std::string* Entry::add_args() {
  // @@protoc_insertion_point(field_add_mutable:floyd.Entry.args)
  return args_.Add();
}
inline void Entry::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:floyd.Entry.args)
}
#if LANG_CXX11
inline void Entry::add_args(::std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:floyd.Entry.args)
}
#endif
inline void Entry::add_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:floyd.Entry.args)
}
inline void Entry::add_args(const void* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:floyd.Entry.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Entry::args() const {
  // @@protoc_insertion_point(field_list:floyd.Entry.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Entry::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:floyd.Entry.args)
  return &args_;
}

// -------------------------------------------------------------------

// CmdRequest_RequestVote

// required uint64 term = 1;
inline bool CmdRequest_RequestVote::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_RequestVote::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_RequestVote::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_RequestVote::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdRequest_RequestVote::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.RequestVote.term)
  return term_;
}
inline void CmdRequest_RequestVote::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.RequestVote.term)
}

// required bytes ip = 2;
inline bool CmdRequest_RequestVote::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_RequestVote::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_RequestVote::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_RequestVote::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& CmdRequest_RequestVote::ip() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.RequestVote.ip)
  return ip_.GetNoArena();
}
inline void CmdRequest_RequestVote::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.RequestVote.ip)
}
#if LANG_CXX11
inline void CmdRequest_RequestVote::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdRequest.RequestVote.ip)
}
#endif
inline void CmdRequest_RequestVote::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdRequest.RequestVote.ip)
}
inline void CmdRequest_RequestVote::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdRequest.RequestVote.ip)
}
inline ::std::string* CmdRequest_RequestVote::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.RequestVote.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdRequest_RequestVote::release_ip() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.RequestVote.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdRequest_RequestVote::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.RequestVote.ip)
}

// required int32 port = 3;
inline bool CmdRequest_RequestVote::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest_RequestVote::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest_RequestVote::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest_RequestVote::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CmdRequest_RequestVote::port() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.RequestVote.port)
  return port_;
}
inline void CmdRequest_RequestVote::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.RequestVote.port)
}

// required uint64 last_log_index = 4;
inline bool CmdRequest_RequestVote::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_RequestVote::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_RequestVote::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_RequestVote::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 CmdRequest_RequestVote::last_log_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.RequestVote.last_log_index)
  return last_log_index_;
}
inline void CmdRequest_RequestVote::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.RequestVote.last_log_index)
}

// required uint64 last_log_term = 5;
inline bool CmdRequest_RequestVote::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_RequestVote::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_RequestVote::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_RequestVote::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::uint64 CmdRequest_RequestVote::last_log_term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.RequestVote.last_log_term)
  return last_log_term_;
}
inline void CmdRequest_RequestVote::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.RequestVote.last_log_term)
}

// -------------------------------------------------------------------

// CmdRequest_AppendEntries

// required uint64 term = 1;
inline bool CmdRequest_AppendEntries::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_AppendEntries::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_AppendEntries::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.AppendEntries.term)
  return term_;
}
inline void CmdRequest_AppendEntries::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.AppendEntries.term)
}

// required bytes ip = 2;
inline bool CmdRequest_AppendEntries::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_AppendEntries::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_AppendEntries::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& CmdRequest_AppendEntries::ip() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.AppendEntries.ip)
  return ip_.GetNoArena();
}
inline void CmdRequest_AppendEntries::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.AppendEntries.ip)
}
#if LANG_CXX11
inline void CmdRequest_AppendEntries::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdRequest.AppendEntries.ip)
}
#endif
inline void CmdRequest_AppendEntries::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdRequest.AppendEntries.ip)
}
inline void CmdRequest_AppendEntries::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdRequest.AppendEntries.ip)
}
inline ::std::string* CmdRequest_AppendEntries::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.AppendEntries.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdRequest_AppendEntries::release_ip() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.AppendEntries.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdRequest_AppendEntries::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.AppendEntries.ip)
}

// required int32 port = 3;
inline bool CmdRequest_AppendEntries::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdRequest_AppendEntries::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdRequest_AppendEntries::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CmdRequest_AppendEntries::port() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.AppendEntries.port)
  return port_;
}
inline void CmdRequest_AppendEntries::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.AppendEntries.port)
}

// required uint64 prev_log_index = 4;
inline bool CmdRequest_AppendEntries::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_prev_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_AppendEntries::clear_has_prev_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_AppendEntries::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_index();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::prev_log_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.AppendEntries.prev_log_index)
  return prev_log_index_;
}
inline void CmdRequest_AppendEntries::set_prev_log_index(::google::protobuf::uint64 value) {
  set_has_prev_log_index();
  prev_log_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.AppendEntries.prev_log_index)
}

// required uint64 prev_log_term = 5;
inline bool CmdRequest_AppendEntries::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_AppendEntries::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_AppendEntries::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_term();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::prev_log_term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.AppendEntries.prev_log_term)
  return prev_log_term_;
}
inline void CmdRequest_AppendEntries::set_prev_log_term(::google::protobuf::uint64 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.AppendEntries.prev_log_term)
}

// required uint64 leader_commit = 6;
inline bool CmdRequest_AppendEntries::has_leader_commit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_leader_commit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest_AppendEntries::clear_has_leader_commit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest_AppendEntries::clear_leader_commit() {
  leader_commit_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_commit();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::leader_commit() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.AppendEntries.leader_commit)
  return leader_commit_;
}
inline void CmdRequest_AppendEntries::set_leader_commit(::google::protobuf::uint64 value) {
  set_has_leader_commit();
  leader_commit_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.AppendEntries.leader_commit)
}

// repeated .floyd.Entry entries = 7;
inline int CmdRequest_AppendEntries::entries_size() const {
  return entries_.size();
}
inline void CmdRequest_AppendEntries::clear_entries() {
  entries_.Clear();
}
inline ::floyd::Entry* CmdRequest_AppendEntries::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.AppendEntries.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::floyd::Entry >*
CmdRequest_AppendEntries::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:floyd.CmdRequest.AppendEntries.entries)
  return &entries_;
}
inline const ::floyd::Entry& CmdRequest_AppendEntries::entries(int index) const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.AppendEntries.entries)
  return entries_.Get(index);
}
inline ::floyd::Entry* CmdRequest_AppendEntries::add_entries() {
  // @@protoc_insertion_point(field_add:floyd.CmdRequest.AppendEntries.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::floyd::Entry >&
CmdRequest_AppendEntries::entries() const {
  // @@protoc_insertion_point(field_list:floyd.CmdRequest.AppendEntries.entries)
  return entries_;
}

// -------------------------------------------------------------------

// CmdRequest_KvRequest

// required bytes key = 1;
inline bool CmdRequest_KvRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_KvRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_KvRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_KvRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& CmdRequest_KvRequest::key() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.KvRequest.key)
  return key_.GetNoArena();
}
inline void CmdRequest_KvRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.KvRequest.key)
}
#if LANG_CXX11
inline void CmdRequest_KvRequest::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdRequest.KvRequest.key)
}
#endif
inline void CmdRequest_KvRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdRequest.KvRequest.key)
}
inline void CmdRequest_KvRequest::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdRequest.KvRequest.key)
}
inline ::std::string* CmdRequest_KvRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.KvRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdRequest_KvRequest::release_key() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.KvRequest.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdRequest_KvRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.KvRequest.key)
}

// optional bytes value = 2;
inline bool CmdRequest_KvRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_KvRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_KvRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_KvRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& CmdRequest_KvRequest::value() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.KvRequest.value)
  return value_.GetNoArena();
}
inline void CmdRequest_KvRequest::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.KvRequest.value)
}
#if LANG_CXX11
inline void CmdRequest_KvRequest::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdRequest.KvRequest.value)
}
#endif
inline void CmdRequest_KvRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdRequest.KvRequest.value)
}
inline void CmdRequest_KvRequest::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdRequest.KvRequest.value)
}
inline ::std::string* CmdRequest_KvRequest::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.KvRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdRequest_KvRequest::release_value() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.KvRequest.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdRequest_KvRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.KvRequest.value)
}

// -------------------------------------------------------------------

// CmdRequest_LockRequest

// required bytes name = 1;
inline bool CmdRequest_LockRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_LockRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_LockRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_LockRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CmdRequest_LockRequest::name() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.LockRequest.name)
  return name_.GetNoArena();
}
inline void CmdRequest_LockRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.LockRequest.name)
}
#if LANG_CXX11
inline void CmdRequest_LockRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdRequest.LockRequest.name)
}
#endif
inline void CmdRequest_LockRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdRequest.LockRequest.name)
}
inline void CmdRequest_LockRequest::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdRequest.LockRequest.name)
}
inline ::std::string* CmdRequest_LockRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.LockRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdRequest_LockRequest::release_name() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.LockRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdRequest_LockRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.LockRequest.name)
}

// required bytes holder = 2;
inline bool CmdRequest_LockRequest::has_holder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_LockRequest::set_has_holder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_LockRequest::clear_has_holder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_LockRequest::clear_holder() {
  holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holder();
}
inline const ::std::string& CmdRequest_LockRequest::holder() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.LockRequest.holder)
  return holder_.GetNoArena();
}
inline void CmdRequest_LockRequest::set_holder(const ::std::string& value) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.LockRequest.holder)
}
#if LANG_CXX11
inline void CmdRequest_LockRequest::set_holder(::std::string&& value) {
  set_has_holder();
  holder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdRequest.LockRequest.holder)
}
#endif
inline void CmdRequest_LockRequest::set_holder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdRequest.LockRequest.holder)
}
inline void CmdRequest_LockRequest::set_holder(const void* value, size_t size) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdRequest.LockRequest.holder)
}
inline ::std::string* CmdRequest_LockRequest::mutable_holder() {
  set_has_holder();
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.LockRequest.holder)
  return holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdRequest_LockRequest::release_holder() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.LockRequest.holder)
  if (!has_holder()) {
    return NULL;
  }
  clear_has_holder();
  return holder_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdRequest_LockRequest::set_allocated_holder(::std::string* holder) {
  if (holder != NULL) {
    set_has_holder();
  } else {
    clear_has_holder();
  }
  holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holder);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.LockRequest.holder)
}

// optional uint64 lease_end = 3;
inline bool CmdRequest_LockRequest::has_lease_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_LockRequest::set_has_lease_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_LockRequest::clear_has_lease_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_LockRequest::clear_lease_end() {
  lease_end_ = GOOGLE_ULONGLONG(0);
  clear_has_lease_end();
}
inline ::google::protobuf::uint64 CmdRequest_LockRequest::lease_end() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.LockRequest.lease_end)
  return lease_end_;
}
inline void CmdRequest_LockRequest::set_lease_end(::google::protobuf::uint64 value) {
  set_has_lease_end();
  lease_end_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.LockRequest.lease_end)
}

// -------------------------------------------------------------------

// CmdRequest_AddServerRequest

// required bytes new_server = 1;
inline bool CmdRequest_AddServerRequest::has_new_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_AddServerRequest::set_has_new_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_AddServerRequest::clear_has_new_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_AddServerRequest::clear_new_server() {
  new_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_server();
}
inline const ::std::string& CmdRequest_AddServerRequest::new_server() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.AddServerRequest.new_server)
  return new_server_.GetNoArena();
}
inline void CmdRequest_AddServerRequest::set_new_server(const ::std::string& value) {
  set_has_new_server();
  new_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.AddServerRequest.new_server)
}
#if LANG_CXX11
inline void CmdRequest_AddServerRequest::set_new_server(::std::string&& value) {
  set_has_new_server();
  new_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdRequest.AddServerRequest.new_server)
}
#endif
inline void CmdRequest_AddServerRequest::set_new_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_server();
  new_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdRequest.AddServerRequest.new_server)
}
inline void CmdRequest_AddServerRequest::set_new_server(const void* value, size_t size) {
  set_has_new_server();
  new_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdRequest.AddServerRequest.new_server)
}
inline ::std::string* CmdRequest_AddServerRequest::mutable_new_server() {
  set_has_new_server();
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.AddServerRequest.new_server)
  return new_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdRequest_AddServerRequest::release_new_server() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.AddServerRequest.new_server)
  if (!has_new_server()) {
    return NULL;
  }
  clear_has_new_server();
  return new_server_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdRequest_AddServerRequest::set_allocated_new_server(::std::string* new_server) {
  if (new_server != NULL) {
    set_has_new_server();
  } else {
    clear_has_new_server();
  }
  new_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_server);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.AddServerRequest.new_server)
}

// -------------------------------------------------------------------

// CmdRequest_RemoveServerRequest

// required bytes old_server = 1;
inline bool CmdRequest_RemoveServerRequest::has_old_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_RemoveServerRequest::set_has_old_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_RemoveServerRequest::clear_has_old_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_RemoveServerRequest::clear_old_server() {
  old_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_old_server();
}
inline const ::std::string& CmdRequest_RemoveServerRequest::old_server() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.RemoveServerRequest.old_server)
  return old_server_.GetNoArena();
}
inline void CmdRequest_RemoveServerRequest::set_old_server(const ::std::string& value) {
  set_has_old_server();
  old_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.RemoveServerRequest.old_server)
}
#if LANG_CXX11
inline void CmdRequest_RemoveServerRequest::set_old_server(::std::string&& value) {
  set_has_old_server();
  old_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdRequest.RemoveServerRequest.old_server)
}
#endif
inline void CmdRequest_RemoveServerRequest::set_old_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_old_server();
  old_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdRequest.RemoveServerRequest.old_server)
}
inline void CmdRequest_RemoveServerRequest::set_old_server(const void* value, size_t size) {
  set_has_old_server();
  old_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdRequest.RemoveServerRequest.old_server)
}
inline ::std::string* CmdRequest_RemoveServerRequest::mutable_old_server() {
  set_has_old_server();
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.RemoveServerRequest.old_server)
  return old_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdRequest_RemoveServerRequest::release_old_server() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.RemoveServerRequest.old_server)
  if (!has_old_server()) {
    return NULL;
  }
  clear_has_old_server();
  return old_server_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdRequest_RemoveServerRequest::set_allocated_old_server(::std::string* old_server) {
  if (old_server != NULL) {
    set_has_old_server();
  } else {
    clear_has_old_server();
  }
  old_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_server);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.RemoveServerRequest.old_server)
}

// -------------------------------------------------------------------

// CmdRequest_ServerStatus

// required int64 term = 1;
inline bool CmdRequest_ServerStatus::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_ServerStatus::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_ServerStatus::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 CmdRequest_ServerStatus::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.ServerStatus.term)
  return term_;
}
inline void CmdRequest_ServerStatus::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.ServerStatus.term)
}

// required int64 commit_index = 2;
inline bool CmdRequest_ServerStatus::has_commit_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_commit_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_ServerStatus::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_ServerStatus::clear_commit_index() {
  commit_index_ = GOOGLE_LONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::int64 CmdRequest_ServerStatus::commit_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.ServerStatus.commit_index)
  return commit_index_;
}
inline void CmdRequest_ServerStatus::set_commit_index(::google::protobuf::int64 value) {
  set_has_commit_index();
  commit_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.ServerStatus.commit_index)
}

// optional bytes ip = 3;
inline bool CmdRequest_ServerStatus::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_ServerStatus::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_ServerStatus::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& CmdRequest_ServerStatus::ip() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.ServerStatus.ip)
  return ip_.GetNoArena();
}
inline void CmdRequest_ServerStatus::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.ServerStatus.ip)
}
#if LANG_CXX11
inline void CmdRequest_ServerStatus::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdRequest.ServerStatus.ip)
}
#endif
inline void CmdRequest_ServerStatus::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdRequest.ServerStatus.ip)
}
inline void CmdRequest_ServerStatus::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdRequest.ServerStatus.ip)
}
inline ::std::string* CmdRequest_ServerStatus::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.ServerStatus.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdRequest_ServerStatus::release_ip() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.ServerStatus.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdRequest_ServerStatus::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.ServerStatus.ip)
}

// optional int32 port = 4;
inline bool CmdRequest_ServerStatus::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_ServerStatus::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_ServerStatus::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CmdRequest_ServerStatus::port() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.ServerStatus.port)
  return port_;
}
inline void CmdRequest_ServerStatus::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.ServerStatus.port)
}

// -------------------------------------------------------------------

// CmdRequest_McachedRequest

// repeated bytes args = 1;
inline int CmdRequest_McachedRequest::args_size() const {
  return args_.size();
}
inline void CmdRequest_McachedRequest::clear_args() {
  args_.Clear();
}
inline const ::std::string& CmdRequest_McachedRequest::args(int index) const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.McachedRequest.args)
  return args_.Get(index);
}
inline ::std::string* CmdRequest_McachedRequest::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.McachedRequest.args)
  return args_.Mutable(index);
}
inline void CmdRequest_McachedRequest::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.McachedRequest.args)
  args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CmdRequest_McachedRequest::set_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.McachedRequest.args)
  args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CmdRequest_McachedRequest::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:floyd.CmdRequest.McachedRequest.args)
}
inline void CmdRequest_McachedRequest::set_args(int index, const void* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdRequest.McachedRequest.args)
}
inline ::std::string* CmdRequest_McachedRequest::add_args() {
  // @@protoc_insertion_point(field_add_mutable:floyd.CmdRequest.McachedRequest.args)
  return args_.Add();
}
inline void CmdRequest_McachedRequest::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:floyd.CmdRequest.McachedRequest.args)
}
#if LANG_CXX11
inline void CmdRequest_McachedRequest::add_args(::std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:floyd.CmdRequest.McachedRequest.args)
}
#endif
inline void CmdRequest_McachedRequest::add_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:floyd.CmdRequest.McachedRequest.args)
}
inline void CmdRequest_McachedRequest::add_args(const void* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:floyd.CmdRequest.McachedRequest.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CmdRequest_McachedRequest::args() const {
  // @@protoc_insertion_point(field_list:floyd.CmdRequest.McachedRequest.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CmdRequest_McachedRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:floyd.CmdRequest.McachedRequest.args)
  return &args_;
}

// -------------------------------------------------------------------

// CmdRequest

// required .floyd.Type type = 1;
inline bool CmdRequest::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CmdRequest::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CmdRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CmdRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::floyd::Type CmdRequest::type() const {
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.type)
  return static_cast< ::floyd::Type >(type_);
}
inline void CmdRequest::set_type(::floyd::Type value) {
  assert(::floyd::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdRequest.type)
}

// optional .floyd.CmdRequest.RequestVote request_vote = 2;
inline bool CmdRequest::has_request_vote() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest::set_has_request_vote() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest::clear_has_request_vote() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest::clear_request_vote() {
  if (request_vote_ != NULL) request_vote_->Clear();
  clear_has_request_vote();
}
inline const ::floyd::CmdRequest_RequestVote& CmdRequest::_internal_request_vote() const {
  return *request_vote_;
}
inline const ::floyd::CmdRequest_RequestVote& CmdRequest::request_vote() const {
  const ::floyd::CmdRequest_RequestVote* p = request_vote_;
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.request_vote)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdRequest_RequestVote*>(
      &::floyd::_CmdRequest_RequestVote_default_instance_);
}
inline ::floyd::CmdRequest_RequestVote* CmdRequest::release_request_vote() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.request_vote)
  clear_has_request_vote();
  ::floyd::CmdRequest_RequestVote* temp = request_vote_;
  request_vote_ = NULL;
  return temp;
}
inline ::floyd::CmdRequest_RequestVote* CmdRequest::mutable_request_vote() {
  set_has_request_vote();
  if (request_vote_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdRequest_RequestVote>(GetArenaNoVirtual());
    request_vote_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.request_vote)
  return request_vote_;
}
inline void CmdRequest::set_allocated_request_vote(::floyd::CmdRequest_RequestVote* request_vote) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_vote_;
  }
  if (request_vote) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_vote = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_vote, submessage_arena);
    }
    set_has_request_vote();
  } else {
    clear_has_request_vote();
  }
  request_vote_ = request_vote;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.request_vote)
}

// optional .floyd.CmdRequest.AppendEntries append_entries = 3;
inline bool CmdRequest::has_append_entries() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest::set_has_append_entries() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest::clear_has_append_entries() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest::clear_append_entries() {
  if (append_entries_ != NULL) append_entries_->Clear();
  clear_has_append_entries();
}
inline const ::floyd::CmdRequest_AppendEntries& CmdRequest::_internal_append_entries() const {
  return *append_entries_;
}
inline const ::floyd::CmdRequest_AppendEntries& CmdRequest::append_entries() const {
  const ::floyd::CmdRequest_AppendEntries* p = append_entries_;
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.append_entries)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdRequest_AppendEntries*>(
      &::floyd::_CmdRequest_AppendEntries_default_instance_);
}
inline ::floyd::CmdRequest_AppendEntries* CmdRequest::release_append_entries() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.append_entries)
  clear_has_append_entries();
  ::floyd::CmdRequest_AppendEntries* temp = append_entries_;
  append_entries_ = NULL;
  return temp;
}
inline ::floyd::CmdRequest_AppendEntries* CmdRequest::mutable_append_entries() {
  set_has_append_entries();
  if (append_entries_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdRequest_AppendEntries>(GetArenaNoVirtual());
    append_entries_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.append_entries)
  return append_entries_;
}
inline void CmdRequest::set_allocated_append_entries(::floyd::CmdRequest_AppendEntries* append_entries) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete append_entries_;
  }
  if (append_entries) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      append_entries = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, append_entries, submessage_arena);
    }
    set_has_append_entries();
  } else {
    clear_has_append_entries();
  }
  append_entries_ = append_entries;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.append_entries)
}

// optional .floyd.CmdRequest.KvRequest kv_request = 4;
inline bool CmdRequest::has_kv_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest::set_has_kv_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest::clear_has_kv_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest::clear_kv_request() {
  if (kv_request_ != NULL) kv_request_->Clear();
  clear_has_kv_request();
}
inline const ::floyd::CmdRequest_KvRequest& CmdRequest::_internal_kv_request() const {
  return *kv_request_;
}
inline const ::floyd::CmdRequest_KvRequest& CmdRequest::kv_request() const {
  const ::floyd::CmdRequest_KvRequest* p = kv_request_;
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.kv_request)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdRequest_KvRequest*>(
      &::floyd::_CmdRequest_KvRequest_default_instance_);
}
inline ::floyd::CmdRequest_KvRequest* CmdRequest::release_kv_request() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.kv_request)
  clear_has_kv_request();
  ::floyd::CmdRequest_KvRequest* temp = kv_request_;
  kv_request_ = NULL;
  return temp;
}
inline ::floyd::CmdRequest_KvRequest* CmdRequest::mutable_kv_request() {
  set_has_kv_request();
  if (kv_request_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdRequest_KvRequest>(GetArenaNoVirtual());
    kv_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.kv_request)
  return kv_request_;
}
inline void CmdRequest::set_allocated_kv_request(::floyd::CmdRequest_KvRequest* kv_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kv_request_;
  }
  if (kv_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kv_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kv_request, submessage_arena);
    }
    set_has_kv_request();
  } else {
    clear_has_kv_request();
  }
  kv_request_ = kv_request;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.kv_request)
}

// optional .floyd.CmdRequest.LockRequest lock_request = 5;
inline bool CmdRequest::has_lock_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest::set_has_lock_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest::clear_has_lock_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest::clear_lock_request() {
  if (lock_request_ != NULL) lock_request_->Clear();
  clear_has_lock_request();
}
inline const ::floyd::CmdRequest_LockRequest& CmdRequest::_internal_lock_request() const {
  return *lock_request_;
}
inline const ::floyd::CmdRequest_LockRequest& CmdRequest::lock_request() const {
  const ::floyd::CmdRequest_LockRequest* p = lock_request_;
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.lock_request)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdRequest_LockRequest*>(
      &::floyd::_CmdRequest_LockRequest_default_instance_);
}
inline ::floyd::CmdRequest_LockRequest* CmdRequest::release_lock_request() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.lock_request)
  clear_has_lock_request();
  ::floyd::CmdRequest_LockRequest* temp = lock_request_;
  lock_request_ = NULL;
  return temp;
}
inline ::floyd::CmdRequest_LockRequest* CmdRequest::mutable_lock_request() {
  set_has_lock_request();
  if (lock_request_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdRequest_LockRequest>(GetArenaNoVirtual());
    lock_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.lock_request)
  return lock_request_;
}
inline void CmdRequest::set_allocated_lock_request(::floyd::CmdRequest_LockRequest* lock_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lock_request_;
  }
  if (lock_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lock_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lock_request, submessage_arena);
    }
    set_has_lock_request();
  } else {
    clear_has_lock_request();
  }
  lock_request_ = lock_request;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.lock_request)
}

// optional .floyd.CmdRequest.ServerStatus server_status = 6;
inline bool CmdRequest::has_server_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest::set_has_server_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest::clear_has_server_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest::clear_server_status() {
  if (server_status_ != NULL) server_status_->Clear();
  clear_has_server_status();
}
inline const ::floyd::CmdRequest_ServerStatus& CmdRequest::_internal_server_status() const {
  return *server_status_;
}
inline const ::floyd::CmdRequest_ServerStatus& CmdRequest::server_status() const {
  const ::floyd::CmdRequest_ServerStatus* p = server_status_;
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.server_status)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdRequest_ServerStatus*>(
      &::floyd::_CmdRequest_ServerStatus_default_instance_);
}
inline ::floyd::CmdRequest_ServerStatus* CmdRequest::release_server_status() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.server_status)
  clear_has_server_status();
  ::floyd::CmdRequest_ServerStatus* temp = server_status_;
  server_status_ = NULL;
  return temp;
}
inline ::floyd::CmdRequest_ServerStatus* CmdRequest::mutable_server_status() {
  set_has_server_status();
  if (server_status_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdRequest_ServerStatus>(GetArenaNoVirtual());
    server_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.server_status)
  return server_status_;
}
inline void CmdRequest::set_allocated_server_status(::floyd::CmdRequest_ServerStatus* server_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_status_;
  }
  if (server_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_status, submessage_arena);
    }
    set_has_server_status();
  } else {
    clear_has_server_status();
  }
  server_status_ = server_status;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.server_status)
}

// optional .floyd.CmdRequest.AddServerRequest add_server_request = 7;
inline bool CmdRequest::has_add_server_request() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdRequest::set_has_add_server_request() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdRequest::clear_has_add_server_request() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdRequest::clear_add_server_request() {
  if (add_server_request_ != NULL) add_server_request_->Clear();
  clear_has_add_server_request();
}
inline const ::floyd::CmdRequest_AddServerRequest& CmdRequest::_internal_add_server_request() const {
  return *add_server_request_;
}
inline const ::floyd::CmdRequest_AddServerRequest& CmdRequest::add_server_request() const {
  const ::floyd::CmdRequest_AddServerRequest* p = add_server_request_;
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.add_server_request)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdRequest_AddServerRequest*>(
      &::floyd::_CmdRequest_AddServerRequest_default_instance_);
}
inline ::floyd::CmdRequest_AddServerRequest* CmdRequest::release_add_server_request() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.add_server_request)
  clear_has_add_server_request();
  ::floyd::CmdRequest_AddServerRequest* temp = add_server_request_;
  add_server_request_ = NULL;
  return temp;
}
inline ::floyd::CmdRequest_AddServerRequest* CmdRequest::mutable_add_server_request() {
  set_has_add_server_request();
  if (add_server_request_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdRequest_AddServerRequest>(GetArenaNoVirtual());
    add_server_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.add_server_request)
  return add_server_request_;
}
inline void CmdRequest::set_allocated_add_server_request(::floyd::CmdRequest_AddServerRequest* add_server_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete add_server_request_;
  }
  if (add_server_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_server_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_server_request, submessage_arena);
    }
    set_has_add_server_request();
  } else {
    clear_has_add_server_request();
  }
  add_server_request_ = add_server_request;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.add_server_request)
}

// optional .floyd.CmdRequest.RemoveServerRequest remove_server_request = 8;
inline bool CmdRequest::has_remove_server_request() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdRequest::set_has_remove_server_request() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdRequest::clear_has_remove_server_request() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdRequest::clear_remove_server_request() {
  if (remove_server_request_ != NULL) remove_server_request_->Clear();
  clear_has_remove_server_request();
}
inline const ::floyd::CmdRequest_RemoveServerRequest& CmdRequest::_internal_remove_server_request() const {
  return *remove_server_request_;
}
inline const ::floyd::CmdRequest_RemoveServerRequest& CmdRequest::remove_server_request() const {
  const ::floyd::CmdRequest_RemoveServerRequest* p = remove_server_request_;
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.remove_server_request)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdRequest_RemoveServerRequest*>(
      &::floyd::_CmdRequest_RemoveServerRequest_default_instance_);
}
inline ::floyd::CmdRequest_RemoveServerRequest* CmdRequest::release_remove_server_request() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.remove_server_request)
  clear_has_remove_server_request();
  ::floyd::CmdRequest_RemoveServerRequest* temp = remove_server_request_;
  remove_server_request_ = NULL;
  return temp;
}
inline ::floyd::CmdRequest_RemoveServerRequest* CmdRequest::mutable_remove_server_request() {
  set_has_remove_server_request();
  if (remove_server_request_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdRequest_RemoveServerRequest>(GetArenaNoVirtual());
    remove_server_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.remove_server_request)
  return remove_server_request_;
}
inline void CmdRequest::set_allocated_remove_server_request(::floyd::CmdRequest_RemoveServerRequest* remove_server_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete remove_server_request_;
  }
  if (remove_server_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      remove_server_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remove_server_request, submessage_arena);
    }
    set_has_remove_server_request();
  } else {
    clear_has_remove_server_request();
  }
  remove_server_request_ = remove_server_request;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.remove_server_request)
}

// optional .floyd.CmdRequest.McachedRequest mcached_request = 9;
inline bool CmdRequest::has_mcached_request() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdRequest::set_has_mcached_request() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdRequest::clear_has_mcached_request() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdRequest::clear_mcached_request() {
  if (mcached_request_ != NULL) mcached_request_->Clear();
  clear_has_mcached_request();
}
inline const ::floyd::CmdRequest_McachedRequest& CmdRequest::_internal_mcached_request() const {
  return *mcached_request_;
}
inline const ::floyd::CmdRequest_McachedRequest& CmdRequest::mcached_request() const {
  const ::floyd::CmdRequest_McachedRequest* p = mcached_request_;
  // @@protoc_insertion_point(field_get:floyd.CmdRequest.mcached_request)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdRequest_McachedRequest*>(
      &::floyd::_CmdRequest_McachedRequest_default_instance_);
}
inline ::floyd::CmdRequest_McachedRequest* CmdRequest::release_mcached_request() {
  // @@protoc_insertion_point(field_release:floyd.CmdRequest.mcached_request)
  clear_has_mcached_request();
  ::floyd::CmdRequest_McachedRequest* temp = mcached_request_;
  mcached_request_ = NULL;
  return temp;
}
inline ::floyd::CmdRequest_McachedRequest* CmdRequest::mutable_mcached_request() {
  set_has_mcached_request();
  if (mcached_request_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdRequest_McachedRequest>(GetArenaNoVirtual());
    mcached_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdRequest.mcached_request)
  return mcached_request_;
}
inline void CmdRequest::set_allocated_mcached_request(::floyd::CmdRequest_McachedRequest* mcached_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mcached_request_;
  }
  if (mcached_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcached_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcached_request, submessage_arena);
    }
    set_has_mcached_request();
  } else {
    clear_has_mcached_request();
  }
  mcached_request_ = mcached_request;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdRequest.mcached_request)
}

// -------------------------------------------------------------------

// CmdResponse_RequestVoteResponse

// required uint64 term = 1;
inline bool CmdResponse_RequestVoteResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_RequestVoteResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_RequestVoteResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_RequestVoteResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.RequestVoteResponse.term)
  return term_;
}
inline void CmdResponse_RequestVoteResponse::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.RequestVoteResponse.term)
}

// required bool vote_granted = 2;
inline bool CmdResponse_RequestVoteResponse::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_RequestVoteResponse::set_has_vote_granted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_RequestVoteResponse::clear_has_vote_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_RequestVoteResponse::clear_vote_granted() {
  vote_granted_ = false;
  clear_has_vote_granted();
}
inline bool CmdResponse_RequestVoteResponse::vote_granted() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.RequestVoteResponse.vote_granted)
  return vote_granted_;
}
inline void CmdResponse_RequestVoteResponse::set_vote_granted(bool value) {
  set_has_vote_granted();
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.RequestVoteResponse.vote_granted)
}

// -------------------------------------------------------------------

// CmdResponse_AppendEntriesResponse

// required uint64 term = 1;
inline bool CmdResponse_AppendEntriesResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_AppendEntriesResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_AppendEntriesResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_AppendEntriesResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.AppendEntriesResponse.term)
  return term_;
}
inline void CmdResponse_AppendEntriesResponse::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.AppendEntriesResponse.term)
}

// required bool success = 2;
inline bool CmdResponse_AppendEntriesResponse::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse_AppendEntriesResponse::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse_AppendEntriesResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse_AppendEntriesResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool CmdResponse_AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.AppendEntriesResponse.success)
  return success_;
}
inline void CmdResponse_AppendEntriesResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.AppendEntriesResponse.success)
}

// optional uint64 last_log_index = 3;
inline bool CmdResponse_AppendEntriesResponse::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_AppendEntriesResponse::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_AppendEntriesResponse::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_AppendEntriesResponse::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 CmdResponse_AppendEntriesResponse::last_log_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.AppendEntriesResponse.last_log_index)
  return last_log_index_;
}
inline void CmdResponse_AppendEntriesResponse::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.AppendEntriesResponse.last_log_index)
}

// -------------------------------------------------------------------

// CmdResponse_KvResponse

// optional bytes value = 1;
inline bool CmdResponse_KvResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_KvResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_KvResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_KvResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& CmdResponse_KvResponse::value() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.KvResponse.value)
  return value_.GetNoArena();
}
inline void CmdResponse_KvResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.KvResponse.value)
}
#if LANG_CXX11
inline void CmdResponse_KvResponse::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdResponse.KvResponse.value)
}
#endif
inline void CmdResponse_KvResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.KvResponse.value)
}
inline void CmdResponse_KvResponse::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.KvResponse.value)
}
inline ::std::string* CmdResponse_KvResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.KvResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResponse_KvResponse::release_value() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.KvResponse.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_KvResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.KvResponse.value)
}

// -------------------------------------------------------------------

// CmdResponse_McachedResponse

// optional bytes value = 1;
inline bool CmdResponse_McachedResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_McachedResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_McachedResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_McachedResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& CmdResponse_McachedResponse::value() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.McachedResponse.value)
  return value_.GetNoArena();
}
inline void CmdResponse_McachedResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.McachedResponse.value)
}
#if LANG_CXX11
inline void CmdResponse_McachedResponse::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdResponse.McachedResponse.value)
}
#endif
inline void CmdResponse_McachedResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.McachedResponse.value)
}
inline void CmdResponse_McachedResponse::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.McachedResponse.value)
}
inline ::std::string* CmdResponse_McachedResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.McachedResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResponse_McachedResponse::release_value() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.McachedResponse.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_McachedResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.McachedResponse.value)
}

// -------------------------------------------------------------------

// CmdResponse_ServerStatus

// required uint64 term = 1;
inline bool CmdResponse_ServerStatus::has_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdResponse_ServerStatus::clear_has_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdResponse_ServerStatus::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.term)
  return term_;
}
inline void CmdResponse_ServerStatus::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.term)
}

// required uint64 commit_index = 2;
inline bool CmdResponse_ServerStatus::has_commit_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_commit_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdResponse_ServerStatus::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdResponse_ServerStatus::clear_commit_index() {
  commit_index_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::commit_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.commit_index)
  return commit_index_;
}
inline void CmdResponse_ServerStatus::set_commit_index(::google::protobuf::uint64 value) {
  set_has_commit_index();
  commit_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.commit_index)
}

// required bytes role = 3;
inline bool CmdResponse_ServerStatus::has_role() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_role() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_ServerStatus::clear_has_role() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_ServerStatus::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_role();
}
inline const ::std::string& CmdResponse_ServerStatus::role() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.role)
  return role_.GetNoArena();
}
inline void CmdResponse_ServerStatus::set_role(const ::std::string& value) {
  set_has_role();
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.role)
}
#if LANG_CXX11
inline void CmdResponse_ServerStatus::set_role(::std::string&& value) {
  set_has_role();
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdResponse.ServerStatus.role)
}
#endif
inline void CmdResponse_ServerStatus::set_role(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_role();
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.ServerStatus.role)
}
inline void CmdResponse_ServerStatus::set_role(const void* value, size_t size) {
  set_has_role();
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.ServerStatus.role)
}
inline ::std::string* CmdResponse_ServerStatus::mutable_role() {
  set_has_role();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.ServerStatus.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResponse_ServerStatus::release_role() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.ServerStatus.role)
  if (!has_role()) {
    return NULL;
  }
  clear_has_role();
  return role_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_ServerStatus::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    set_has_role();
  } else {
    clear_has_role();
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.ServerStatus.role)
}

// optional bytes leader_ip = 4;
inline bool CmdResponse_ServerStatus::has_leader_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_leader_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_ServerStatus::clear_has_leader_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_ServerStatus::clear_leader_ip() {
  leader_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_ip();
}
inline const ::std::string& CmdResponse_ServerStatus::leader_ip() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.leader_ip)
  return leader_ip_.GetNoArena();
}
inline void CmdResponse_ServerStatus::set_leader_ip(const ::std::string& value) {
  set_has_leader_ip();
  leader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.leader_ip)
}
#if LANG_CXX11
inline void CmdResponse_ServerStatus::set_leader_ip(::std::string&& value) {
  set_has_leader_ip();
  leader_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdResponse.ServerStatus.leader_ip)
}
#endif
inline void CmdResponse_ServerStatus::set_leader_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_ip();
  leader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.ServerStatus.leader_ip)
}
inline void CmdResponse_ServerStatus::set_leader_ip(const void* value, size_t size) {
  set_has_leader_ip();
  leader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.ServerStatus.leader_ip)
}
inline ::std::string* CmdResponse_ServerStatus::mutable_leader_ip() {
  set_has_leader_ip();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.ServerStatus.leader_ip)
  return leader_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResponse_ServerStatus::release_leader_ip() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.ServerStatus.leader_ip)
  if (!has_leader_ip()) {
    return NULL;
  }
  clear_has_leader_ip();
  return leader_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_ServerStatus::set_allocated_leader_ip(::std::string* leader_ip) {
  if (leader_ip != NULL) {
    set_has_leader_ip();
  } else {
    clear_has_leader_ip();
  }
  leader_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_ip);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.ServerStatus.leader_ip)
}

// optional int32 leader_port = 5;
inline bool CmdResponse_ServerStatus::has_leader_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_leader_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdResponse_ServerStatus::clear_has_leader_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdResponse_ServerStatus::clear_leader_port() {
  leader_port_ = 0;
  clear_has_leader_port();
}
inline ::google::protobuf::int32 CmdResponse_ServerStatus::leader_port() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.leader_port)
  return leader_port_;
}
inline void CmdResponse_ServerStatus::set_leader_port(::google::protobuf::int32 value) {
  set_has_leader_port();
  leader_port_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.leader_port)
}

// optional bytes voted_for_ip = 6;
inline bool CmdResponse_ServerStatus::has_voted_for_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_voted_for_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse_ServerStatus::clear_has_voted_for_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse_ServerStatus::clear_voted_for_ip() {
  voted_for_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voted_for_ip();
}
inline const ::std::string& CmdResponse_ServerStatus::voted_for_ip() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.voted_for_ip)
  return voted_for_ip_.GetNoArena();
}
inline void CmdResponse_ServerStatus::set_voted_for_ip(const ::std::string& value) {
  set_has_voted_for_ip();
  voted_for_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.voted_for_ip)
}
#if LANG_CXX11
inline void CmdResponse_ServerStatus::set_voted_for_ip(::std::string&& value) {
  set_has_voted_for_ip();
  voted_for_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdResponse.ServerStatus.voted_for_ip)
}
#endif
inline void CmdResponse_ServerStatus::set_voted_for_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_voted_for_ip();
  voted_for_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.ServerStatus.voted_for_ip)
}
inline void CmdResponse_ServerStatus::set_voted_for_ip(const void* value, size_t size) {
  set_has_voted_for_ip();
  voted_for_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.ServerStatus.voted_for_ip)
}
inline ::std::string* CmdResponse_ServerStatus::mutable_voted_for_ip() {
  set_has_voted_for_ip();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.ServerStatus.voted_for_ip)
  return voted_for_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResponse_ServerStatus::release_voted_for_ip() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.ServerStatus.voted_for_ip)
  if (!has_voted_for_ip()) {
    return NULL;
  }
  clear_has_voted_for_ip();
  return voted_for_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_ServerStatus::set_allocated_voted_for_ip(::std::string* voted_for_ip) {
  if (voted_for_ip != NULL) {
    set_has_voted_for_ip();
  } else {
    clear_has_voted_for_ip();
  }
  voted_for_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voted_for_ip);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.ServerStatus.voted_for_ip)
}

// optional int32 voted_for_port = 7;
inline bool CmdResponse_ServerStatus::has_voted_for_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_voted_for_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdResponse_ServerStatus::clear_has_voted_for_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdResponse_ServerStatus::clear_voted_for_port() {
  voted_for_port_ = 0;
  clear_has_voted_for_port();
}
inline ::google::protobuf::int32 CmdResponse_ServerStatus::voted_for_port() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.voted_for_port)
  return voted_for_port_;
}
inline void CmdResponse_ServerStatus::set_voted_for_port(::google::protobuf::int32 value) {
  set_has_voted_for_port();
  voted_for_port_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.voted_for_port)
}

// optional uint64 last_log_term = 8;
inline bool CmdResponse_ServerStatus::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdResponse_ServerStatus::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdResponse_ServerStatus::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_log_term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.last_log_term)
  return last_log_term_;
}
inline void CmdResponse_ServerStatus::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.last_log_term)
}

// optional uint64 last_log_index = 9;
inline bool CmdResponse_ServerStatus::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CmdResponse_ServerStatus::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CmdResponse_ServerStatus::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_log_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.last_log_index)
  return last_log_index_;
}
inline void CmdResponse_ServerStatus::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.last_log_index)
}

// optional uint64 last_applied = 10;
inline bool CmdResponse_ServerStatus::has_last_applied() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_applied() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CmdResponse_ServerStatus::clear_has_last_applied() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CmdResponse_ServerStatus::clear_last_applied() {
  last_applied_ = GOOGLE_ULONGLONG(0);
  clear_has_last_applied();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_applied() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.last_applied)
  return last_applied_;
}
inline void CmdResponse_ServerStatus::set_last_applied(::google::protobuf::uint64 value) {
  set_has_last_applied();
  last_applied_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.last_applied)
}

// -------------------------------------------------------------------

// CmdResponse

// required .floyd.Type type = 1;
inline bool CmdResponse::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdResponse::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::floyd::Type CmdResponse::type() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.type)
  return static_cast< ::floyd::Type >(type_);
}
inline void CmdResponse::set_type(::floyd::Type value) {
  assert(::floyd::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.type)
}

// optional .floyd.StatusCode code = 2;
inline bool CmdResponse::has_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CmdResponse::set_has_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CmdResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CmdResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::floyd::StatusCode CmdResponse::code() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.code)
  return static_cast< ::floyd::StatusCode >(code_);
}
inline void CmdResponse::set_code(::floyd::StatusCode value) {
  assert(::floyd::StatusCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.code)
}

// optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
inline bool CmdResponse::has_request_vote_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse::set_has_request_vote_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse::clear_has_request_vote_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse::clear_request_vote_res() {
  if (request_vote_res_ != NULL) request_vote_res_->Clear();
  clear_has_request_vote_res();
}
inline const ::floyd::CmdResponse_RequestVoteResponse& CmdResponse::_internal_request_vote_res() const {
  return *request_vote_res_;
}
inline const ::floyd::CmdResponse_RequestVoteResponse& CmdResponse::request_vote_res() const {
  const ::floyd::CmdResponse_RequestVoteResponse* p = request_vote_res_;
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.request_vote_res)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdResponse_RequestVoteResponse*>(
      &::floyd::_CmdResponse_RequestVoteResponse_default_instance_);
}
inline ::floyd::CmdResponse_RequestVoteResponse* CmdResponse::release_request_vote_res() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.request_vote_res)
  clear_has_request_vote_res();
  ::floyd::CmdResponse_RequestVoteResponse* temp = request_vote_res_;
  request_vote_res_ = NULL;
  return temp;
}
inline ::floyd::CmdResponse_RequestVoteResponse* CmdResponse::mutable_request_vote_res() {
  set_has_request_vote_res();
  if (request_vote_res_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdResponse_RequestVoteResponse>(GetArenaNoVirtual());
    request_vote_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.request_vote_res)
  return request_vote_res_;
}
inline void CmdResponse::set_allocated_request_vote_res(::floyd::CmdResponse_RequestVoteResponse* request_vote_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_vote_res_;
  }
  if (request_vote_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_vote_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_vote_res, submessage_arena);
    }
    set_has_request_vote_res();
  } else {
    clear_has_request_vote_res();
  }
  request_vote_res_ = request_vote_res;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.request_vote_res)
}

// optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
inline bool CmdResponse::has_append_entries_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse::set_has_append_entries_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse::clear_has_append_entries_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse::clear_append_entries_res() {
  if (append_entries_res_ != NULL) append_entries_res_->Clear();
  clear_has_append_entries_res();
}
inline const ::floyd::CmdResponse_AppendEntriesResponse& CmdResponse::_internal_append_entries_res() const {
  return *append_entries_res_;
}
inline const ::floyd::CmdResponse_AppendEntriesResponse& CmdResponse::append_entries_res() const {
  const ::floyd::CmdResponse_AppendEntriesResponse* p = append_entries_res_;
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.append_entries_res)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdResponse_AppendEntriesResponse*>(
      &::floyd::_CmdResponse_AppendEntriesResponse_default_instance_);
}
inline ::floyd::CmdResponse_AppendEntriesResponse* CmdResponse::release_append_entries_res() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.append_entries_res)
  clear_has_append_entries_res();
  ::floyd::CmdResponse_AppendEntriesResponse* temp = append_entries_res_;
  append_entries_res_ = NULL;
  return temp;
}
inline ::floyd::CmdResponse_AppendEntriesResponse* CmdResponse::mutable_append_entries_res() {
  set_has_append_entries_res();
  if (append_entries_res_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdResponse_AppendEntriesResponse>(GetArenaNoVirtual());
    append_entries_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.append_entries_res)
  return append_entries_res_;
}
inline void CmdResponse::set_allocated_append_entries_res(::floyd::CmdResponse_AppendEntriesResponse* append_entries_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete append_entries_res_;
  }
  if (append_entries_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      append_entries_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, append_entries_res, submessage_arena);
    }
    set_has_append_entries_res();
  } else {
    clear_has_append_entries_res();
  }
  append_entries_res_ = append_entries_res;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.append_entries_res)
}

// optional bytes msg = 5;
inline bool CmdResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& CmdResponse::msg() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.msg)
  return msg_.GetNoArena();
}
inline void CmdResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.msg)
}
#if LANG_CXX11
inline void CmdResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.CmdResponse.msg)
}
#endif
inline void CmdResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.msg)
}
inline void CmdResponse::set_msg(const void* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.msg)
}
inline ::std::string* CmdResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResponse::release_msg() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.msg)
}

// optional .floyd.CmdResponse.KvResponse kv_response = 6;
inline bool CmdResponse::has_kv_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdResponse::set_has_kv_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdResponse::clear_has_kv_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdResponse::clear_kv_response() {
  if (kv_response_ != NULL) kv_response_->Clear();
  clear_has_kv_response();
}
inline const ::floyd::CmdResponse_KvResponse& CmdResponse::_internal_kv_response() const {
  return *kv_response_;
}
inline const ::floyd::CmdResponse_KvResponse& CmdResponse::kv_response() const {
  const ::floyd::CmdResponse_KvResponse* p = kv_response_;
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.kv_response)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdResponse_KvResponse*>(
      &::floyd::_CmdResponse_KvResponse_default_instance_);
}
inline ::floyd::CmdResponse_KvResponse* CmdResponse::release_kv_response() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.kv_response)
  clear_has_kv_response();
  ::floyd::CmdResponse_KvResponse* temp = kv_response_;
  kv_response_ = NULL;
  return temp;
}
inline ::floyd::CmdResponse_KvResponse* CmdResponse::mutable_kv_response() {
  set_has_kv_response();
  if (kv_response_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdResponse_KvResponse>(GetArenaNoVirtual());
    kv_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.kv_response)
  return kv_response_;
}
inline void CmdResponse::set_allocated_kv_response(::floyd::CmdResponse_KvResponse* kv_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kv_response_;
  }
  if (kv_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kv_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kv_response, submessage_arena);
    }
    set_has_kv_response();
  } else {
    clear_has_kv_response();
  }
  kv_response_ = kv_response;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.kv_response)
}

// optional .floyd.CmdResponse.ServerStatus server_status = 7;
inline bool CmdResponse::has_server_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdResponse::set_has_server_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdResponse::clear_has_server_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdResponse::clear_server_status() {
  if (server_status_ != NULL) server_status_->Clear();
  clear_has_server_status();
}
inline const ::floyd::CmdResponse_ServerStatus& CmdResponse::_internal_server_status() const {
  return *server_status_;
}
inline const ::floyd::CmdResponse_ServerStatus& CmdResponse::server_status() const {
  const ::floyd::CmdResponse_ServerStatus* p = server_status_;
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.server_status)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdResponse_ServerStatus*>(
      &::floyd::_CmdResponse_ServerStatus_default_instance_);
}
inline ::floyd::CmdResponse_ServerStatus* CmdResponse::release_server_status() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.server_status)
  clear_has_server_status();
  ::floyd::CmdResponse_ServerStatus* temp = server_status_;
  server_status_ = NULL;
  return temp;
}
inline ::floyd::CmdResponse_ServerStatus* CmdResponse::mutable_server_status() {
  set_has_server_status();
  if (server_status_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdResponse_ServerStatus>(GetArenaNoVirtual());
    server_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.server_status)
  return server_status_;
}
inline void CmdResponse::set_allocated_server_status(::floyd::CmdResponse_ServerStatus* server_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_status_;
  }
  if (server_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_status, submessage_arena);
    }
    set_has_server_status();
  } else {
    clear_has_server_status();
  }
  server_status_ = server_status;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.server_status)
}

// optional .floyd.Membership all_servers = 8;
inline bool CmdResponse::has_all_servers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdResponse::set_has_all_servers() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdResponse::clear_has_all_servers() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdResponse::clear_all_servers() {
  if (all_servers_ != NULL) all_servers_->Clear();
  clear_has_all_servers();
}
inline const ::floyd::Membership& CmdResponse::_internal_all_servers() const {
  return *all_servers_;
}
inline const ::floyd::Membership& CmdResponse::all_servers() const {
  const ::floyd::Membership* p = all_servers_;
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.all_servers)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::Membership*>(
      &::floyd::_Membership_default_instance_);
}
inline ::floyd::Membership* CmdResponse::release_all_servers() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.all_servers)
  clear_has_all_servers();
  ::floyd::Membership* temp = all_servers_;
  all_servers_ = NULL;
  return temp;
}
inline ::floyd::Membership* CmdResponse::mutable_all_servers() {
  set_has_all_servers();
  if (all_servers_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::Membership>(GetArenaNoVirtual());
    all_servers_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.all_servers)
  return all_servers_;
}
inline void CmdResponse::set_allocated_all_servers(::floyd::Membership* all_servers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete all_servers_;
  }
  if (all_servers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      all_servers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, all_servers, submessage_arena);
    }
    set_has_all_servers();
  } else {
    clear_has_all_servers();
  }
  all_servers_ = all_servers;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.all_servers)
}

// optional .floyd.CmdResponse.McachedResponse mcached_response = 9;
inline bool CmdResponse::has_mcached_response() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdResponse::set_has_mcached_response() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdResponse::clear_has_mcached_response() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdResponse::clear_mcached_response() {
  if (mcached_response_ != NULL) mcached_response_->Clear();
  clear_has_mcached_response();
}
inline const ::floyd::CmdResponse_McachedResponse& CmdResponse::_internal_mcached_response() const {
  return *mcached_response_;
}
inline const ::floyd::CmdResponse_McachedResponse& CmdResponse::mcached_response() const {
  const ::floyd::CmdResponse_McachedResponse* p = mcached_response_;
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.mcached_response)
  return p != NULL ? *p : *reinterpret_cast<const ::floyd::CmdResponse_McachedResponse*>(
      &::floyd::_CmdResponse_McachedResponse_default_instance_);
}
inline ::floyd::CmdResponse_McachedResponse* CmdResponse::release_mcached_response() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.mcached_response)
  clear_has_mcached_response();
  ::floyd::CmdResponse_McachedResponse* temp = mcached_response_;
  mcached_response_ = NULL;
  return temp;
}
inline ::floyd::CmdResponse_McachedResponse* CmdResponse::mutable_mcached_response() {
  set_has_mcached_response();
  if (mcached_response_ == NULL) {
    auto* p = CreateMaybeMessage<::floyd::CmdResponse_McachedResponse>(GetArenaNoVirtual());
    mcached_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.mcached_response)
  return mcached_response_;
}
inline void CmdResponse::set_allocated_mcached_response(::floyd::CmdResponse_McachedResponse* mcached_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mcached_response_;
  }
  if (mcached_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcached_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcached_response, submessage_arena);
    }
    set_has_mcached_response();
  } else {
    clear_has_mcached_response();
  }
  mcached_response_ = mcached_response;
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.mcached_response)
}

// -------------------------------------------------------------------

// Lock

// required bytes holder = 1;
inline bool Lock::has_holder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lock::set_has_holder() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lock::clear_has_holder() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lock::clear_holder() {
  holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holder();
}
inline const ::std::string& Lock::holder() const {
  // @@protoc_insertion_point(field_get:floyd.Lock.holder)
  return holder_.GetNoArena();
}
inline void Lock::set_holder(const ::std::string& value) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.Lock.holder)
}
#if LANG_CXX11
inline void Lock::set_holder(::std::string&& value) {
  set_has_holder();
  holder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:floyd.Lock.holder)
}
#endif
inline void Lock::set_holder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.Lock.holder)
}
inline void Lock::set_holder(const void* value, size_t size) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.Lock.holder)
}
inline ::std::string* Lock::mutable_holder() {
  set_has_holder();
  // @@protoc_insertion_point(field_mutable:floyd.Lock.holder)
  return holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lock::release_holder() {
  // @@protoc_insertion_point(field_release:floyd.Lock.holder)
  if (!has_holder()) {
    return NULL;
  }
  clear_has_holder();
  return holder_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lock::set_allocated_holder(::std::string* holder) {
  if (holder != NULL) {
    set_has_holder();
  } else {
    clear_has_holder();
  }
  holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holder);
  // @@protoc_insertion_point(field_set_allocated:floyd.Lock.holder)
}

// required uint64 lease_end = 2;
inline bool Lock::has_lease_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lock::set_has_lease_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lock::clear_has_lease_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lock::clear_lease_end() {
  lease_end_ = GOOGLE_ULONGLONG(0);
  clear_has_lease_end();
}
inline ::google::protobuf::uint64 Lock::lease_end() const {
  // @@protoc_insertion_point(field_get:floyd.Lock.lease_end)
  return lease_end_;
}
inline void Lock::set_lease_end(::google::protobuf::uint64 value) {
  set_has_lease_end();
  lease_end_ = value;
  // @@protoc_insertion_point(field_set:floyd.Lock.lease_end)
}

// -------------------------------------------------------------------

// Membership

// repeated bytes nodes = 1;
inline int Membership::nodes_size() const {
  return nodes_.size();
}
inline void Membership::clear_nodes() {
  nodes_.Clear();
}
inline const ::std::string& Membership::nodes(int index) const {
  // @@protoc_insertion_point(field_get:floyd.Membership.nodes)
  return nodes_.Get(index);
}
inline ::std::string* Membership::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:floyd.Membership.nodes)
  return nodes_.Mutable(index);
}
inline void Membership::set_nodes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:floyd.Membership.nodes)
  nodes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Membership::set_nodes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:floyd.Membership.nodes)
  nodes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Membership::set_nodes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:floyd.Membership.nodes)
}
inline void Membership::set_nodes(int index, const void* value, size_t size) {
  nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:floyd.Membership.nodes)
}
inline ::std::string* Membership::add_nodes() {
  // @@protoc_insertion_point(field_add_mutable:floyd.Membership.nodes)
  return nodes_.Add();
}
inline void Membership::add_nodes(const ::std::string& value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:floyd.Membership.nodes)
}
#if LANG_CXX11
inline void Membership::add_nodes(::std::string&& value) {
  nodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:floyd.Membership.nodes)
}
#endif
inline void Membership::add_nodes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:floyd.Membership.nodes)
}
inline void Membership::add_nodes(const void* value, size_t size) {
  nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:floyd.Membership.nodes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Membership::nodes() const {
  // @@protoc_insertion_point(field_list:floyd.Membership.nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Membership::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:floyd.Membership.nodes)
  return &nodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace floyd

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::floyd::Entry_OpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::floyd::Entry_OpType>() {
  return ::floyd::Entry_OpType_descriptor();
}
template <> struct is_proto_enum< ::floyd::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::floyd::Type>() {
  return ::floyd::Type_descriptor();
}
template <> struct is_proto_enum< ::floyd::StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::floyd::StatusCode>() {
  return ::floyd::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_floyd_2eproto
